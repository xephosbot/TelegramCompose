//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package com.xbot.tdlibx.coroutines

import com.xbot.tdlibx.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.AnimatedEmoji
import org.drinkless.tdlib.TdApi.EmojiCategories
import org.drinkless.tdlib.TdApi.EmojiCategoryType
import org.drinkless.tdlib.TdApi.EmojiReaction
import org.drinkless.tdlib.TdApi.EmojiStatus
import org.drinkless.tdlib.TdApi.EmojiStatuses
import org.drinkless.tdlib.TdApi.Emojis
import org.drinkless.tdlib.TdApi.HttpUrl
import org.drinkless.tdlib.TdApi.InputFile
import org.drinkless.tdlib.TdApi.Sticker
import org.drinkless.tdlib.TdApi.Stickers

/**
 * Suspend function, which clears the list of recently used emoji statuses.
 */
suspend fun TelegramFlow.clearRecentEmojiStatuses() =
    this.sendFunctionLaunch(TdApi.ClearRecentEmojiStatuses())

/**
 * Suspend function, which informs TDLib that a message with an animated emoji was clicked by the
 * user. Returns a big animated sticker to be played or a 404 error if usual animation needs to be
 * played.
 *
 * @param chatId Chat identifier of the message.  
 * @param messageId Identifier of the clicked message.
 *
 * @return [Sticker] Describes a sticker.
 */
suspend fun TelegramFlow.clickAnimatedEmojiMessage(chatId: Long, messageId: Long): Sticker =
    this.sendFunctionAsync(TdApi.ClickAnimatedEmojiMessage(chatId, messageId))

/**
 * Suspend function, which returns an animated emoji corresponding to a given emoji. Returns a 404
 * error if the emoji has no animated emoji.
 *
 * @param emoji The emoji.
 *
 * @return [AnimatedEmoji] Describes an animated or custom representation of an emoji.
 */
suspend fun TelegramFlow.getAnimatedEmoji(emoji: String?): AnimatedEmoji =
    this.sendFunctionAsync(TdApi.GetAnimatedEmoji(emoji))

/**
 * Suspend function, which returns TGS stickers with generic animations for custom emoji reactions.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getCustomEmojiReactionAnimations(): Stickers =
    this.sendFunctionAsync(TdApi.GetCustomEmojiReactionAnimations())

/**
 * Suspend function, which returns list of custom emoji stickers by their identifiers. Stickers are
 * returned in arbitrary order. Only found stickers are returned.
 *
 * @param customEmojiIds Identifiers of custom emoji stickers. At most 200 custom emoji stickers can
 * be received simultaneously.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getCustomEmojiStickers(customEmojiIds: LongArray?): Stickers =
    this.sendFunctionAsync(TdApi.GetCustomEmojiStickers(customEmojiIds))

/**
 * Suspend function, which returns default list of custom emoji stickers for placing on a chat
 * photo.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getDefaultChatPhotoCustomEmojiStickers(): Stickers =
    this.sendFunctionAsync(TdApi.GetDefaultChatPhotoCustomEmojiStickers())

/**
 * Suspend function, which returns default emoji statuses.
 *
 * @return [EmojiStatuses] Contains a list of emoji statuses.
 */
suspend fun TelegramFlow.getDefaultEmojiStatuses(): EmojiStatuses =
    this.sendFunctionAsync(TdApi.GetDefaultEmojiStatuses())

/**
 * Suspend function, which returns default list of custom emoji stickers for placing on a profile
 * photo.
 *
 * @return [Stickers] Represents a list of stickers.
 */
suspend fun TelegramFlow.getDefaultProfilePhotoCustomEmojiStickers(): Stickers =
    this.sendFunctionAsync(TdApi.GetDefaultProfilePhotoCustomEmojiStickers())

/**
 * Suspend function, which returns available emojis categories.
 *
 * @param type Type of emoji categories to return; pass null to get default emoji categories.
 *
 * @return [EmojiCategories] Represents a list of emoji categories.
 */
suspend fun TelegramFlow.getEmojiCategories(type: EmojiCategoryType?): EmojiCategories =
    this.sendFunctionAsync(TdApi.GetEmojiCategories(type))

/**
 * Suspend function, which returns information about a emoji reaction. Returns a 404 error if the
 * reaction is not found.
 *
 * @param emoji Text representation of the reaction.
 *
 * @return [EmojiReaction] Contains information about a emoji reaction.
 */
suspend fun TelegramFlow.getEmojiReaction(emoji: String?): EmojiReaction =
    this.sendFunctionAsync(TdApi.GetEmojiReaction(emoji))

/**
 * Suspend function, which returns an HTTP URL which can be used to automatically log in to the
 * translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after
 * generation.
 *
 * @param languageCode Language code for which the emoji replacements will be suggested.
 *
 * @return [HttpUrl] Contains an HTTP URL.
 */
suspend fun TelegramFlow.getEmojiSuggestionsUrl(languageCode: String?): HttpUrl =
    this.sendFunctionAsync(TdApi.GetEmojiSuggestionsUrl(languageCode))

/**
 * Suspend function, which returns recent emoji statuses.
 *
 * @return [EmojiStatuses] Contains a list of emoji statuses.
 */
suspend fun TelegramFlow.getRecentEmojiStatuses(): EmojiStatuses =
    this.sendFunctionAsync(TdApi.GetRecentEmojiStatuses())

/**
 * Suspend function, which returns emoji corresponding to a sticker. The list is only for
 * informational purposes, because a sticker is always sent with a fixed emoji from the corresponding
 * Sticker object.
 *
 * @param sticker Sticker file identifier.
 *
 * @return [Emojis] Represents a list of emoji.
 */
suspend fun TelegramFlow.getStickerEmojis(sticker: InputFile?): Emojis =
    this.sendFunctionAsync(TdApi.GetStickerEmojis(sticker))

/**
 * Suspend function, which returns up to 8 emoji statuses, which must be shown right after the
 * default Premium Badge in the emoji status list.
 *
 * @return [EmojiStatuses] Contains a list of emoji statuses.
 */
suspend fun TelegramFlow.getThemedEmojiStatuses(): EmojiStatuses =
    this.sendFunctionAsync(TdApi.GetThemedEmojiStatuses())

/**
 * Suspend function, which searches for emojis by keywords. Supported only if the file database is
 * enabled.
 *
 * @param text Text to search for.  
 * @param exactMatch Pass true if only emojis, which exactly match the text, needs to be returned.  
 * @param inputLanguageCodes List of possible IETF language tags of the user&#039;s input language;
 * may be empty if unknown.
 *
 * @return [Emojis] Represents a list of emoji.
 */
suspend fun TelegramFlow.searchEmojis(
  text: String?,
  exactMatch: Boolean,
  inputLanguageCodes: Array<String>?
): Emojis = this.sendFunctionAsync(TdApi.SearchEmojis(text, exactMatch, inputLanguageCodes))

/**
 * Suspend function, which sets a custom emoji sticker set thumbnail; for bots only.
 *
 * @param name Sticker set name.  
 * @param customEmojiId Identifier of the custom emoji from the sticker set, which will be set as
 * sticker set thumbnail; pass 0 to remove the sticker set thumbnail.
 */
suspend fun TelegramFlow.setCustomEmojiStickerSetThumbnail(name: String?, customEmojiId: Long) =
    this.sendFunctionLaunch(TdApi.SetCustomEmojiStickerSetThumbnail(name, customEmojiId))

/**
 * Suspend function, which changes the emoji status of the current user; for Telegram Premium users
 * only.
 *
 * @param emojiStatus New emoji status; pass null to switch to the default badge.  
 * @param duration Duration of the status, in seconds; pass 0 to keep the status active until it
 * will be changed manually.
 */
suspend fun TelegramFlow.setEmojiStatus(emojiStatus: EmojiStatus?, duration: Int) =
    this.sendFunctionLaunch(TdApi.SetEmojiStatus(emojiStatus, duration))

/**
 * Suspend function, which changes the list of emoji corresponding to a sticker; for bots only. The
 * sticker must belong to a regular or custom emoji sticker set created by the bot.
 *
 * @param sticker Sticker.  
 * @param emojis New string with 1-20 emoji corresponding to the sticker.
 */
suspend fun TelegramFlow.setStickerEmojis(sticker: InputFile?, emojis: String?) =
    this.sendFunctionLaunch(TdApi.SetStickerEmojis(sticker, emojis))
