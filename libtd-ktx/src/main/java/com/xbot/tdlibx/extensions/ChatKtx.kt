//
// NOTE: THIS FILE IS AUTO-GENERATED by the "ExtensionsGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package com.xbot.tdlibx.extensions

import com.xbot.tdlibx.core.TelegramFlow
import com.xbot.tdlibx.coroutines.addChatMember
import com.xbot.tdlibx.coroutines.addChatMembers
import com.xbot.tdlibx.coroutines.addChatToList
import com.xbot.tdlibx.coroutines.addFileToDownloads
import com.xbot.tdlibx.coroutines.addLocalMessage
import com.xbot.tdlibx.coroutines.addMessageReaction
import com.xbot.tdlibx.coroutines.addRecentlyFoundChat
import com.xbot.tdlibx.coroutines.banChatMember
import com.xbot.tdlibx.coroutines.checkChatUsername
import com.xbot.tdlibx.coroutines.clickAnimatedEmojiMessage
import com.xbot.tdlibx.coroutines.closeChat
import com.xbot.tdlibx.coroutines.createChatInviteLink
import com.xbot.tdlibx.coroutines.createForumTopic
import com.xbot.tdlibx.coroutines.createVideoChat
import com.xbot.tdlibx.coroutines.deleteAllRevokedChatInviteLinks
import com.xbot.tdlibx.coroutines.deleteChat
import com.xbot.tdlibx.coroutines.deleteChatHistory
import com.xbot.tdlibx.coroutines.deleteChatMessagesByDate
import com.xbot.tdlibx.coroutines.deleteChatMessagesBySender
import com.xbot.tdlibx.coroutines.deleteChatReplyMarkup
import com.xbot.tdlibx.coroutines.deleteForumTopic
import com.xbot.tdlibx.coroutines.deleteMessages
import com.xbot.tdlibx.coroutines.deleteRevokedChatInviteLink
import com.xbot.tdlibx.coroutines.editChatInviteLink
import com.xbot.tdlibx.coroutines.editForumTopic
import com.xbot.tdlibx.coroutines.editMessageCaption
import com.xbot.tdlibx.coroutines.editMessageLiveLocation
import com.xbot.tdlibx.coroutines.editMessageMedia
import com.xbot.tdlibx.coroutines.editMessageReplyMarkup
import com.xbot.tdlibx.coroutines.editMessageSchedulingState
import com.xbot.tdlibx.coroutines.editMessageText
import com.xbot.tdlibx.coroutines.forwardMessages
import com.xbot.tdlibx.coroutines.getCallbackQueryAnswer
import com.xbot.tdlibx.coroutines.getCallbackQueryMessage
import com.xbot.tdlibx.coroutines.getChat
import com.xbot.tdlibx.coroutines.getChatAdministrators
import com.xbot.tdlibx.coroutines.getChatAvailableMessageSenders
import com.xbot.tdlibx.coroutines.getChatEventLog
import com.xbot.tdlibx.coroutines.getChatHistory
import com.xbot.tdlibx.coroutines.getChatInviteLink
import com.xbot.tdlibx.coroutines.getChatInviteLinkCounts
import com.xbot.tdlibx.coroutines.getChatInviteLinkMembers
import com.xbot.tdlibx.coroutines.getChatInviteLinks
import com.xbot.tdlibx.coroutines.getChatJoinRequests
import com.xbot.tdlibx.coroutines.getChatListsToAddChat
import com.xbot.tdlibx.coroutines.getChatMember
import com.xbot.tdlibx.coroutines.getChatMessageByDate
import com.xbot.tdlibx.coroutines.getChatMessageCalendar
import com.xbot.tdlibx.coroutines.getChatMessageCount
import com.xbot.tdlibx.coroutines.getChatMessagePosition
import com.xbot.tdlibx.coroutines.getChatPinnedMessage
import com.xbot.tdlibx.coroutines.getChatScheduledMessages
import com.xbot.tdlibx.coroutines.getChatSparseMessagePositions
import com.xbot.tdlibx.coroutines.getChatSponsoredMessages
import com.xbot.tdlibx.coroutines.getChatStatistics
import com.xbot.tdlibx.coroutines.getForumTopic
import com.xbot.tdlibx.coroutines.getForumTopicLink
import com.xbot.tdlibx.coroutines.getForumTopics
import com.xbot.tdlibx.coroutines.getGameHighScores
import com.xbot.tdlibx.coroutines.getInlineQueryResults
import com.xbot.tdlibx.coroutines.getLoginUrl
import com.xbot.tdlibx.coroutines.getLoginUrlInfo
import com.xbot.tdlibx.coroutines.getMapThumbnailFile
import com.xbot.tdlibx.coroutines.getMessage
import com.xbot.tdlibx.coroutines.getMessageAddedReactions
import com.xbot.tdlibx.coroutines.getMessageAvailableReactions
import com.xbot.tdlibx.coroutines.getMessageEmbeddingCode
import com.xbot.tdlibx.coroutines.getMessageImportConfirmationText
import com.xbot.tdlibx.coroutines.getMessageLink
import com.xbot.tdlibx.coroutines.getMessageLocally
import com.xbot.tdlibx.coroutines.getMessagePublicForwards
import com.xbot.tdlibx.coroutines.getMessageStatistics
import com.xbot.tdlibx.coroutines.getMessageThread
import com.xbot.tdlibx.coroutines.getMessageThreadHistory
import com.xbot.tdlibx.coroutines.getMessageViewers
import com.xbot.tdlibx.coroutines.getMessages
import com.xbot.tdlibx.coroutines.getPaymentReceipt
import com.xbot.tdlibx.coroutines.getPollVoters
import com.xbot.tdlibx.coroutines.getRepliedMessage
import com.xbot.tdlibx.coroutines.getStatisticalGraph
import com.xbot.tdlibx.coroutines.getStickers
import com.xbot.tdlibx.coroutines.getVideoChatAvailableParticipants
import com.xbot.tdlibx.coroutines.getVideoChatRtmpUrl
import com.xbot.tdlibx.coroutines.getWebAppLinkUrl
import com.xbot.tdlibx.coroutines.importMessages
import com.xbot.tdlibx.coroutines.joinChat
import com.xbot.tdlibx.coroutines.leaveChat
import com.xbot.tdlibx.coroutines.openChat
import com.xbot.tdlibx.coroutines.openMessageContent
import com.xbot.tdlibx.coroutines.openWebApp
import com.xbot.tdlibx.coroutines.pinChatMessage
import com.xbot.tdlibx.coroutines.processChatJoinRequest
import com.xbot.tdlibx.coroutines.processChatJoinRequests
import com.xbot.tdlibx.coroutines.rateSpeechRecognition
import com.xbot.tdlibx.coroutines.readAllChatMentions
import com.xbot.tdlibx.coroutines.readAllChatReactions
import com.xbot.tdlibx.coroutines.readAllMessageThreadMentions
import com.xbot.tdlibx.coroutines.readAllMessageThreadReactions
import com.xbot.tdlibx.coroutines.recognizeSpeech
import com.xbot.tdlibx.coroutines.removeChatActionBar
import com.xbot.tdlibx.coroutines.removeMessageReaction
import com.xbot.tdlibx.coroutines.removeRecentlyFoundChat
import com.xbot.tdlibx.coroutines.removeTopChat
import com.xbot.tdlibx.coroutines.replacePrimaryChatInviteLink
import com.xbot.tdlibx.coroutines.replaceVideoChatRtmpUrl
import com.xbot.tdlibx.coroutines.reportChat
import com.xbot.tdlibx.coroutines.reportChatPhoto
import com.xbot.tdlibx.coroutines.reportMessageReactions
import com.xbot.tdlibx.coroutines.resendMessages
import com.xbot.tdlibx.coroutines.revokeChatInviteLink
import com.xbot.tdlibx.coroutines.saveApplicationLogEvent
import com.xbot.tdlibx.coroutines.searchChatMembers
import com.xbot.tdlibx.coroutines.searchChatMessages
import com.xbot.tdlibx.coroutines.searchChatRecentLocationMessages
import com.xbot.tdlibx.coroutines.searchSecretMessages
import com.xbot.tdlibx.coroutines.sendBotStartMessage
import com.xbot.tdlibx.coroutines.sendChatAction
import com.xbot.tdlibx.coroutines.sendChatScreenshotTakenNotification
import com.xbot.tdlibx.coroutines.sendInlineQueryResultMessage
import com.xbot.tdlibx.coroutines.sendMessage
import com.xbot.tdlibx.coroutines.sendMessageAlbum
import com.xbot.tdlibx.coroutines.setChatAvailableReactions
import com.xbot.tdlibx.coroutines.setChatBackground
import com.xbot.tdlibx.coroutines.setChatClientData
import com.xbot.tdlibx.coroutines.setChatDescription
import com.xbot.tdlibx.coroutines.setChatDiscussionGroup
import com.xbot.tdlibx.coroutines.setChatDraftMessage
import com.xbot.tdlibx.coroutines.setChatLocation
import com.xbot.tdlibx.coroutines.setChatMemberStatus
import com.xbot.tdlibx.coroutines.setChatMessageAutoDeleteTime
import com.xbot.tdlibx.coroutines.setChatMessageSender
import com.xbot.tdlibx.coroutines.setChatNotificationSettings
import com.xbot.tdlibx.coroutines.setChatPermissions
import com.xbot.tdlibx.coroutines.setChatPhoto
import com.xbot.tdlibx.coroutines.setChatSlowModeDelay
import com.xbot.tdlibx.coroutines.setChatTheme
import com.xbot.tdlibx.coroutines.setChatTitle
import com.xbot.tdlibx.coroutines.setForumTopicNotificationSettings
import com.xbot.tdlibx.coroutines.setGameScore
import com.xbot.tdlibx.coroutines.setPinnedForumTopics
import com.xbot.tdlibx.coroutines.setPollAnswer
import com.xbot.tdlibx.coroutines.setVideoChatDefaultParticipant
import com.xbot.tdlibx.coroutines.shareChatWithBot
import com.xbot.tdlibx.coroutines.shareUserWithBot
import com.xbot.tdlibx.coroutines.stopPoll
import com.xbot.tdlibx.coroutines.toggleChatDefaultDisableNotification
import com.xbot.tdlibx.coroutines.toggleChatHasProtectedContent
import com.xbot.tdlibx.coroutines.toggleChatIsMarkedAsUnread
import com.xbot.tdlibx.coroutines.toggleChatIsPinned
import com.xbot.tdlibx.coroutines.toggleChatIsTranslatable
import com.xbot.tdlibx.coroutines.toggleForumTopicIsClosed
import com.xbot.tdlibx.coroutines.toggleForumTopicIsPinned
import com.xbot.tdlibx.coroutines.toggleGeneralForumTopicIsHidden
import com.xbot.tdlibx.coroutines.transferChatOwnership
import com.xbot.tdlibx.coroutines.translateMessageText
import com.xbot.tdlibx.coroutines.unpinAllChatMessages
import com.xbot.tdlibx.coroutines.unpinAllMessageThreadMessages
import com.xbot.tdlibx.coroutines.unpinChatMessage
import com.xbot.tdlibx.coroutines.upgradeBasicGroupChatToSupergroupChat
import com.xbot.tdlibx.coroutines.viewMessages
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.BackgroundType
import org.drinkless.tdlib.TdApi.CallbackQueryPayload
import org.drinkless.tdlib.TdApi.Chat
import org.drinkless.tdlib.TdApi.ChatAction
import org.drinkless.tdlib.TdApi.ChatAvailableReactions
import org.drinkless.tdlib.TdApi.ChatEventLogFilters
import org.drinkless.tdlib.TdApi.ChatInviteLinkMember
import org.drinkless.tdlib.TdApi.ChatJoinRequest
import org.drinkless.tdlib.TdApi.ChatList
import org.drinkless.tdlib.TdApi.ChatLocation
import org.drinkless.tdlib.TdApi.ChatMemberStatus
import org.drinkless.tdlib.TdApi.ChatMembersFilter
import org.drinkless.tdlib.TdApi.ChatNotificationSettings
import org.drinkless.tdlib.TdApi.ChatPermissions
import org.drinkless.tdlib.TdApi.ChatReportReason
import org.drinkless.tdlib.TdApi.DraftMessage
import org.drinkless.tdlib.TdApi.FormattedText
import org.drinkless.tdlib.TdApi.ForumTopicIcon
import org.drinkless.tdlib.TdApi.InputBackground
import org.drinkless.tdlib.TdApi.InputChatPhoto
import org.drinkless.tdlib.TdApi.InputFile
import org.drinkless.tdlib.TdApi.InputMessageContent
import org.drinkless.tdlib.TdApi.JsonValue
import org.drinkless.tdlib.TdApi.Location
import org.drinkless.tdlib.TdApi.MessageSchedulingState
import org.drinkless.tdlib.TdApi.MessageSendOptions
import org.drinkless.tdlib.TdApi.MessageSender
import org.drinkless.tdlib.TdApi.MessageSource
import org.drinkless.tdlib.TdApi.ReactionType
import org.drinkless.tdlib.TdApi.ReplyMarkup
import org.drinkless.tdlib.TdApi.SearchMessagesFilter
import org.drinkless.tdlib.TdApi.StickerType
import org.drinkless.tdlib.TdApi.ThemeParameters
import org.drinkless.tdlib.TdApi.TopChatCategory

/**
 * Interface for access [TdApi.Chat] extension functions. Can be used alongside with other extension
 * interfaces of the package. Must contain [TelegramFlow] instance field to access its functionality
 */
interface ChatKtx : BaseKtx {
  /**
   * Instance of the [TelegramFlow] connecting extensions to the Telegram Client
   */
  override val api: TelegramFlow

  /**
   * Suspend function, which adds a new member to a chat. Members can&#039;t be added to private or
   * secret chats.
   *
   * @param userId Identifier of the user.  
   * @param forwardLimit The number of earlier messages from the chat to be forwarded to the new
   * member; up to 100. Ignored for supergroups and channels, or if the added user is a bot.
   */
  suspend fun Chat.addMember(userId: Long, forwardLimit: Int) = api.addChatMember(this.id, userId,
      forwardLimit)

  /**
   * Suspend function, which adds multiple new members to a chat. Currently, this method is only
   * available for supergroups and channels. This method can&#039;t be used to join a chat. Members
   * can&#039;t be added to a channel if it has more than 200 members.
   *
   * @param userIds Identifiers of the users to be added to the chat. The maximum number of added
   * users is 20 for supergroups and 100 for channels.
   */
  suspend fun Chat.addMembers(userIds: LongArray?) = api.addChatMembers(this.id, userIds)

  /**
   * Suspend function, which adds a chat to a chat list. A chat can&#039;t be simultaneously in Main
   * and Archive chat lists, so it is automatically removed from another one if needed.
   *
   * @param chatList The chat list. Use getChatListsToAddChat to get suitable chat lists.
   */
  suspend fun Chat.addToList(chatList: ChatList?) = api.addChatToList(this.id, chatList)

  /**
   * Suspend function, which adds a file from a message to the list of file downloads. Download
   * progress and completion of the download will be notified through updateFile updates. If message
   * database is used, the list of file downloads is persistent across application restarts. The
   * downloading is independent from download using downloadFile, i.e. it continues if downloadFile is
   * canceled or is used to download a part of the file.
   *
   * @param fileId Identifier of the file to download.  
   * @param messageId Message identifier.  
   * @param priority Priority of the download (1-32). The higher the priority, the earlier the file
   * will be downloaded. If the priorities of two files are equal, then the last one for which
   * downloadFile/addFileToDownloads was called will be downloaded first.
   *
   * @return [TdApi.File] Represents a file.
   */
  suspend fun Chat.addFileToDownloads(
    fileId: Int,
    messageId: Long,
    priority: Int
  ) = api.addFileToDownloads(fileId, this.id, messageId, priority)

  /**
   * Suspend function, which adds a local message to a chat. The message is persistent across
   * application restarts only if the message database is used. Returns the added message.
   *
   * @param senderId Identifier of the sender of the message.  
   * @param replyToMessageId Identifier of the replied message; 0 if none.  
   * @param disableNotification Pass true to disable notification for the message.  
   * @param inputMessageContent The content of the message to be added.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.addLocalMessage(
    senderId: MessageSender?,
    replyToMessageId: Long,
    disableNotification: Boolean,
    inputMessageContent: InputMessageContent?
  ) = api.addLocalMessage(this.id, senderId, replyToMessageId, disableNotification,
      inputMessageContent)

  /**
   * Suspend function, which adds a reaction to a message. Use getMessageAvailableReactions to
   * receive the list of available reactions for the message.
   *
   * @param messageId Identifier of the message.  
   * @param reactionType Type of the reaction to add.  
   * @param isBig Pass true if the reaction is added with a big animation.  
   * @param updateRecentReactions Pass true if the reaction needs to be added to recent reactions.
   */
  suspend fun Chat.addMessageReaction(
    messageId: Long,
    reactionType: ReactionType?,
    isBig: Boolean,
    updateRecentReactions: Boolean
  ) = api.addMessageReaction(this.id, messageId, reactionType, isBig, updateRecentReactions)

  /**
   * Suspend function, which adds a chat to the list of recently found chats. The chat is added to
   * the beginning of the list. If the chat is already in the list, it will be removed from the list
   * first.
   */
  suspend fun Chat.addRecentlyFound() = api.addRecentlyFoundChat(this.id)

  /**
   * Suspend function, which bans a member in a chat. Members can&#039;t be banned in private or
   * secret chats. In supergroups and channels, the user will not be able to return to the group on
   * their own using invite links, etc., unless unbanned first.
   *
   * @param memberId Member identifier.  
   * @param bannedUntilDate Point in time (Unix timestamp) when the user will be unbanned; 0 if
   * never. If the user is banned for more than 366 days or for less than 30 seconds from the current
   * time, the user is considered to be banned forever. Ignored in basic groups and if a chat is
   * banned.  
   * @param revokeMessages Pass true to delete all messages in the chat for the user that is being
   * removed. Always true for supergroups and channels.
   */
  suspend fun Chat.banMember(
    memberId: MessageSender?,
    bannedUntilDate: Int,
    revokeMessages: Boolean
  ) = api.banChatMember(this.id, memberId, bannedUntilDate, revokeMessages)

  /**
   * Suspend function, which checks whether a username can be set for a chat.
   *
   * @param username Username to be checked.
   *
   * @return [TdApi.CheckChatUsernameResult] This class is an abstract base class.
   */
  suspend fun Chat.checkUsername(username: String?) = api.checkChatUsername(this.id, username)

  /**
   * Suspend function, which informs TDLib that a message with an animated emoji was clicked by the
   * user. Returns a big animated sticker to be played or a 404 error if usual animation needs to be
   * played.
   *
   * @param messageId Identifier of the clicked message.
   *
   * @return [TdApi.Sticker] Describes a sticker.
   */
  suspend fun Chat.clickAnimatedEmojiMessage(messageId: Long) =
      api.clickAnimatedEmojiMessage(this.id, messageId)

  /**
   * Suspend function, which informs TDLib that the chat is closed by the user. Many useful
   * activities depend on the chat being opened or closed.
   */
  suspend fun Chat.close() = api.closeChat(this.id)

  /**
   * Suspend function, which creates a new invite link for a chat. Available for basic groups,
   * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat.
   *
   * @param name Invite link name; 0-32 characters.  
   * @param expirationDate Point in time (Unix timestamp) when the link will expire; pass 0 if
   * never.  
   * @param memberLimit The maximum number of chat members that can join the chat via the link
   * simultaneously; 0-99999; pass 0 if not limited.  
   * @param createsJoinRequest Pass true if users joining the chat via the link need to be approved
   * by chat administrators. In this case, memberLimit must be 0.
   *
   * @return [TdApi.ChatInviteLink] Contains a chat invite link.
   */
  suspend fun Chat.createInviteLink(
    name: String?,
    expirationDate: Int,
    memberLimit: Int,
    createsJoinRequest: Boolean
  ) = api.createChatInviteLink(this.id, name, expirationDate, memberLimit, createsJoinRequest)

  /**
   * Suspend function, which creates a topic in a forum supergroup chat; requires canManageTopics
   * rights in the supergroup.
   *
   * @param name Name of the topic; 1-128 characters.  
   * @param icon Icon of the topic. Icon color must be one of 0x6FB9F0, 0xFFD67E, 0xCB86DB,
   * 0x8EEE98, 0xFF93B2, or 0xFB6F5F. Telegram Premium users can use any custom emoji as topic icon,
   * other users can use only a custom emoji returned by getForumTopicDefaultIcons.
   *
   * @return [TdApi.ForumTopicInfo] Contains basic information about a forum topic.
   */
  suspend fun Chat.createForumTopic(name: String?, icon: ForumTopicIcon?) =
      api.createForumTopic(this.id, name, icon)

  /**
   * Suspend function, which creates a video chat (a group call bound to a chat). Available only for
   * basic groups, supergroups and channels; requires canManageVideoChats rights.
   *
   * @param title Group call title; if empty, chat title will be used.  
   * @param startDate Point in time (Unix timestamp) when the group call is supposed to be started
   * by an administrator; 0 to start the video chat immediately. The date must be at least 10 seconds
   * and at most 8 days in the future.  
   * @param isRtmpStream Pass true to create an RTMP stream instead of an ordinary video chat;
   * requires creator privileges.
   *
   * @return [TdApi.GroupCallId] Contains the group call identifier.
   */
  suspend fun Chat.createVideo(
    title: String?,
    startDate: Int,
    isRtmpStream: Boolean
  ) = api.createVideoChat(this.id, title, startDate, isRtmpStream)

  /**
   * Suspend function, which deletes all revoked chat invite links created by a given chat
   * administrator. Requires administrator privileges and canInviteUsers right in the chat for own
   * links and owner privileges for other links.
   *
   * @param creatorUserId User identifier of a chat administrator, which links will be deleted. Must
   * be an identifier of the current user for non-owner.
   */
  suspend fun Chat.deleteAllRevokedInviteLinks(creatorUserId: Long) =
      api.deleteAllRevokedChatInviteLinks(this.id, creatorUserId)

  /**
   * Suspend function, which deletes a chat along with all messages in the corresponding chat for
   * all chat members. For group chats this will release the usernames and remove all members. Use the
   * field chat.canBeDeletedForAllUsers to find whether the method can be applied to the chat.
   */
  suspend fun Chat.delete() = api.deleteChat(this.id)

  /**
   * Suspend function, which deletes all messages in the chat. Use chat.canBeDeletedOnlyForSelf and
   * chat.canBeDeletedForAllUsers fields to find whether and how the method can be applied to the chat.
   *
   * @param removeFromChatList Pass true to remove the chat from all chat lists.  
   * @param revoke Pass true to delete chat history for all users.
   */
  suspend fun Chat.deleteHistory(removeFromChatList: Boolean, revoke: Boolean) =
      api.deleteChatHistory(this.id, removeFromChatList, revoke)

  /**
   * Suspend function, which deletes all messages between the specified dates in a chat. Supported
   * only for private chats and basic groups. Messages sent in the last 30 seconds will not be deleted.
   *
   * @param minDate The minimum date of the messages to delete.  
   * @param maxDate The maximum date of the messages to delete.  
   * @param revoke Pass true to delete chat messages for all users; private chats only.
   */
  suspend fun Chat.deleteMessagesByDate(
    minDate: Int,
    maxDate: Int,
    revoke: Boolean
  ) = api.deleteChatMessagesByDate(this.id, minDate, maxDate, revoke)

  /**
   * Suspend function, which deletes all messages sent by the specified message sender in a chat.
   * Supported only for supergroups; requires canDeleteMessages administrator privileges.
   *
   * @param senderId Identifier of the sender of messages to delete.
   */
  suspend fun Chat.deleteMessagesBySender(senderId: MessageSender?) =
      api.deleteChatMessagesBySender(this.id, senderId)

  /**
   * Suspend function, which deletes the default reply markup from a chat. Must be called after a
   * one-time keyboard or a replyMarkupForceReply reply markup has been used. An updateChatReplyMarkup
   * update will be sent if the reply markup is changed.
   *
   * @param messageId The message identifier of the used keyboard.
   */
  suspend fun Chat.deleteReplyMarkup(messageId: Long) = api.deleteChatReplyMarkup(this.id,
      messageId)

  /**
   * Suspend function, which deletes all messages in a forum topic; requires canDeleteMessages
   * administrator right in the supergroup unless the user is creator of the topic, the topic has no
   * messages from other users and has at most 11 messages.
   *
   * @param messageThreadId Message thread identifier of the forum topic.
   */
  suspend fun Chat.deleteForumTopic(messageThreadId: Long) = api.deleteForumTopic(this.id,
      messageThreadId)

  /**
   * Suspend function, which deletes messages.
   *
   * @param messageIds Identifiers of the messages to be deleted.  
   * @param revoke Pass true to delete messages for all chat members. Always true for supergroups,
   * channels and secret chats.
   */
  suspend fun Chat.deleteMessages(messageIds: LongArray?, revoke: Boolean) =
      api.deleteMessages(this.id, messageIds, revoke)

  /**
   * Suspend function, which deletes revoked chat invite links. Requires administrator privileges
   * and canInviteUsers right in the chat for own links and owner privileges for other links.
   *
   * @param inviteLink Invite link to revoke.
   */
  suspend fun Chat.deleteRevokedInviteLink(inviteLink: String?) =
      api.deleteRevokedChatInviteLink(this.id, inviteLink)

  /**
   * Suspend function, which edits a non-primary invite link for a chat. Available for basic groups,
   * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat
   * for own links and owner privileges for other links.
   *
   * @param inviteLink Invite link to be edited.  
   * @param name Invite link name; 0-32 characters.  
   * @param expirationDate Point in time (Unix timestamp) when the link will expire; pass 0 if
   * never.  
   * @param memberLimit The maximum number of chat members that can join the chat via the link
   * simultaneously; 0-99999; pass 0 if not limited.  
   * @param createsJoinRequest Pass true if users joining the chat via the link need to be approved
   * by chat administrators. In this case, memberLimit must be 0.
   *
   * @return [TdApi.ChatInviteLink] Contains a chat invite link.
   */
  suspend fun Chat.editInviteLink(
    inviteLink: String?,
    name: String?,
    expirationDate: Int,
    memberLimit: Int,
    createsJoinRequest: Boolean
  ) = api.editChatInviteLink(this.id, inviteLink, name, expirationDate, memberLimit,
      createsJoinRequest)

  /**
   * Suspend function, which edits title and icon of a topic in a forum supergroup chat; requires
   * canManageTopics administrator right in the supergroup unless the user is creator of the topic.
   *
   * @param messageThreadId Message thread identifier of the forum topic.  
   * @param name New name of the topic; 0-128 characters. If empty, the previous topic name is kept.
   *  
   * @param editIconCustomEmoji Pass true to edit the icon of the topic. Icon of the General topic
   * can&#039;t be edited.  
   * @param iconCustomEmojiId Identifier of the new custom emoji for topic icon; pass 0 to remove
   * the custom emoji. Ignored if editIconCustomEmoji is false. Telegram Premium users can use any
   * custom emoji, other users can use only a custom emoji returned by getForumTopicDefaultIcons.
   */
  suspend fun Chat.editForumTopic(
    messageThreadId: Long,
    name: String?,
    editIconCustomEmoji: Boolean,
    iconCustomEmojiId: Long
  ) = api.editForumTopic(this.id, messageThreadId, name, editIconCustomEmoji, iconCustomEmojiId)

  /**
   * Suspend function, which edits the message content caption. Returns the edited message after the
   * edit is completed on the server side.
   *
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param caption New message content caption; 0-getOption(&quot;message_caption_length_max&quot;)
   * characters; pass null to remove caption.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.editMessageCaption(
    messageId: Long,
    replyMarkup: ReplyMarkup?,
    caption: FormattedText?
  ) = api.editMessageCaption(this.id, messageId, replyMarkup, caption)

  /**
   * Suspend function, which edits the message content of a live location. Messages can be edited
   * for a limited period of time specified in the live location. Returns the edited message after the
   * edit is completed on the server side.
   *
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param location New location content of the message; pass null to stop sharing the live
   * location.  
   * @param heading The new direction in which the location moves, in degrees; 1-360. Pass 0 if
   * unknown.  
   * @param proximityAlertRadius The new maximum distance for proximity alerts, in meters
   * (0-100000). Pass 0 if the notification is disabled.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.editMessageLiveLocation(
    messageId: Long,
    replyMarkup: ReplyMarkup?,
    location: Location?,
    heading: Int,
    proximityAlertRadius: Int
  ) = api.editMessageLiveLocation(this.id, messageId, replyMarkup, location, heading,
      proximityAlertRadius)

  /**
   * Suspend function, which edits the content of a message with an animation, an audio, a document,
   * a photo or a video, including message caption. If only the caption needs to be edited, use
   * editMessageCaption instead. The media can&#039;t be edited if the message was set to self-destruct
   * or to a self-destructing media. The type of message content in an album can&#039;t be changed with
   * exception of replacing a photo with a video or vice versa. Returns the edited message after the
   * edit is completed on the server side.
   *
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param inputMessageContent New content of the message. Must be one of the following types:
   * inputMessageAnimation, inputMessageAudio, inputMessageDocument, inputMessagePhoto or
   * inputMessageVideo.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.editMessageMedia(
    messageId: Long,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.editMessageMedia(this.id, messageId, replyMarkup, inputMessageContent)

  /**
   * Suspend function, which edits the message reply markup; for bots only. Returns the edited
   * message after the edit is completed on the server side.
   *
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.editMessageReplyMarkup(messageId: Long, replyMarkup: ReplyMarkup?) =
      api.editMessageReplyMarkup(this.id, messageId, replyMarkup)

  /**
   * Suspend function, which edits the time when a scheduled message will be sent. Scheduling state
   * of all messages in the same album or forwarded together with the message will be also changed.
   *
   * @param messageId Identifier of the message.  
   * @param schedulingState The new message scheduling state; pass null to send the message
   * immediately.
   */
  suspend fun Chat.editMessageSchedulingState(messageId: Long,
      schedulingState: MessageSchedulingState?) = api.editMessageSchedulingState(this.id, messageId,
      schedulingState)

  /**
   * Suspend function, which edits the text of a message (or a text of a game message). Returns the
   * edited message after the edit is completed on the server side.
   *
   * @param messageId Identifier of the message.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.  
   * @param inputMessageContent New text content of the message. Must be of type inputMessageText.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.editMessageText(
    messageId: Long,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.editMessageText(this.id, messageId, replyMarkup, inputMessageContent)

  /**
   * Suspend function, which forwards previously sent messages. Returns the forwarded messages in
   * the same order as the message identifiers passed in messageIds. If a message can&#039;t be
   * forwarded, null will be returned instead of the message.
   *
   * @param messageThreadId If not 0, a message thread identifier in which the message will be sent;
   * for forum threads only.  
   * @param fromChatId Identifier of the chat from which to forward messages.  
   * @param messageIds Identifiers of the messages to forward. Message identifiers must be in a
   * strictly increasing order. At most 100 messages can be forwarded simultaneously.  
   * @param options Options to be used to send the messages; pass null to use default options.  
   * @param sendCopy Pass true to copy content of the messages without reference to the original
   * sender. Always true if the messages are forwarded to a secret chat or are local.  
   * @param removeCaption Pass true to remove media captions of message copies. Ignored if sendCopy
   * is false.  
   * @param onlyPreview Pass true to get fake messages instead of actually forwarding them.
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun Chat.forwardMessages(
    messageThreadId: Long,
    fromChatId: Long,
    messageIds: LongArray?,
    options: MessageSendOptions?,
    sendCopy: Boolean,
    removeCaption: Boolean,
    onlyPreview: Boolean
  ) = api.forwardMessages(this.id, messageThreadId, fromChatId, messageIds, options, sendCopy,
      removeCaption, onlyPreview)

  /**
   * Suspend function, which sends a callback query to a bot and returns an answer. Returns an error
   * with code 502 if the bot fails to answer the query before the query timeout expires.
   *
   * @param messageId Identifier of the message from which the query originated.  
   * @param payload Query payload.
   *
   * @return [TdApi.CallbackQueryAnswer] Contains a bot&#039;s answer to a callback query.
   */
  suspend fun Chat.getCallbackQueryAnswer(messageId: Long, payload: CallbackQueryPayload?) =
      api.getCallbackQueryAnswer(this.id, messageId, payload)

  /**
   * Suspend function, which returns information about a message with the callback button that
   * originated a callback query; for bots only.
   *
   * @param messageId Message identifier.  
   * @param callbackQueryId Identifier of the callback query.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.getCallbackQueryMessage(messageId: Long, callbackQueryId: Long) =
      api.getCallbackQueryMessage(this.id, messageId, callbackQueryId)

  /**
   * Suspend function, which returns information about a chat by its identifier, this is an offline
   * request if the current user is not a bot.
   *
   *
   * @return [TdApi.Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
   */
  suspend fun Chat.get() = api.getChat(this.id)

  /**
   * Suspend function, which returns a list of administrators of the chat with their custom titles.
   *
   *
   * @return [TdApi.ChatAdministrators] Represents a list of chat administrators.
   */
  suspend fun Chat.getAdministrators() = api.getChatAdministrators(this.id)

  /**
   * Suspend function, which returns list of message sender identifiers, which can be used to send
   * messages in a chat.
   *
   *
   * @return [TdApi.ChatMessageSenders] Represents a list of message senders, which can be used to
   * send messages in a chat.
   */
  suspend fun Chat.getAvailableMessageSenders() = api.getChatAvailableMessageSenders(this.id)

  /**
   * Suspend function, which returns a list of service actions taken by chat members and
   * administrators in the last 48 hours. Available only for supergroups and channels. Requires
   * administrator rights. Returns results in reverse chronological order (i.e., in order of decreasing
   * eventId).
   *
   * @param query Search query by which to filter events.  
   * @param fromEventId Identifier of an event from which to return results. Use 0 to get results
   * from the latest events.  
   * @param limit The maximum number of events to return; up to 100.  
   * @param filters The types of events to return; pass null to get chat events of all types.  
   * @param userIds User identifiers by which to filter events. By default, events relating to all
   * users will be returned.
   *
   * @return [TdApi.ChatEvents] Contains a list of chat events.
   */
  suspend fun Chat.getEventLog(
    query: String?,
    fromEventId: Long,
    limit: Int,
    filters: ChatEventLogFilters?,
    userIds: LongArray?
  ) = api.getChatEventLog(this.id, query, fromEventId, limit, filters, userIds)

  /**
   * Suspend function, which returns messages in a chat. The messages are returned in a reverse
   * chronological order (i.e., in order of decreasing messageId). For optimal performance, the number
   * of returned messages is chosen by TDLib. This is an offline request if onlyLocal is true.
   *
   * @param fromMessageId Identifier of the message starting from which history must be fetched; use
   * 0 to get results from the last message.  
   * @param offset Specify 0 to get results from exactly the fromMessageId or a negative offset up
   * to 99 to get additionally some newer messages.  
   * @param limit The maximum number of messages to be returned; must be positive and can&#039;t be
   * greater than 100. If the offset is negative, the limit must be greater than or equal to -offset.
   * For optimal performance, the number of returned messages is chosen by TDLib and can be smaller
   * than the specified limit.  
   * @param onlyLocal Pass true to get only messages that are available without sending network
   * requests.
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun Chat.getHistory(
    fromMessageId: Long,
    offset: Int,
    limit: Int,
    onlyLocal: Boolean
  ) = api.getChatHistory(this.id, fromMessageId, offset, limit, onlyLocal)

  /**
   * Suspend function, which returns information about an invite link. Requires administrator
   * privileges and canInviteUsers right in the chat to get own links and owner privileges to get other
   * links.
   *
   * @param inviteLink Invite link to get.
   *
   * @return [TdApi.ChatInviteLink] Contains a chat invite link.
   */
  suspend fun Chat.getInviteLink(inviteLink: String?) = api.getChatInviteLink(this.id, inviteLink)

  /**
   * Suspend function, which returns list of chat administrators with number of their invite links.
   * Requires owner privileges in the chat.
   *
   *
   * @return [TdApi.ChatInviteLinkCounts] Contains a list of chat invite link counts.
   */
  suspend fun Chat.getInviteLinkCounts() = api.getChatInviteLinkCounts(this.id)

  /**
   * Suspend function, which returns chat members joined a chat via an invite link. Requires
   * administrator privileges and canInviteUsers right in the chat for own links and owner privileges
   * for other links.
   *
   * @param inviteLink Invite link for which to return chat members.  
   * @param offsetMember A chat member from which to return next chat members; pass null to get
   * results from the beginning.  
   * @param limit The maximum number of chat members to return; up to 100.
   *
   * @return [TdApi.ChatInviteLinkMembers] Contains a list of chat members joined a chat via an
   * invite link.
   */
  suspend fun Chat.getInviteLinkMembers(
    inviteLink: String?,
    offsetMember: ChatInviteLinkMember?,
    limit: Int
  ) = api.getChatInviteLinkMembers(this.id, inviteLink, offsetMember, limit)

  /**
   * Suspend function, which returns invite links for a chat created by specified administrator.
   * Requires administrator privileges and canInviteUsers right in the chat to get own links and owner
   * privileges to get other links.
   *
   * @param creatorUserId User identifier of a chat administrator. Must be an identifier of the
   * current user for non-owner.  
   * @param isRevoked Pass true if revoked links needs to be returned instead of active or expired. 
   * 
   * @param offsetDate Creation date of an invite link starting after which to return invite links;
   * use 0 to get results from the beginning.  
   * @param offsetInviteLink Invite link starting after which to return invite links; use empty
   * string to get results from the beginning.  
   * @param limit The maximum number of invite links to return; up to 100.
   *
   * @return [TdApi.ChatInviteLinks] Contains a list of chat invite links.
   */
  suspend fun Chat.getInviteLinks(
    creatorUserId: Long,
    isRevoked: Boolean,
    offsetDate: Int,
    offsetInviteLink: String?,
    limit: Int
  ) = api.getChatInviteLinks(this.id, creatorUserId, isRevoked, offsetDate, offsetInviteLink, limit)

  /**
   * Suspend function, which returns pending join requests in a chat.
   *
   * @param inviteLink Invite link for which to return join requests. If empty, all join requests
   * will be returned. Requires administrator privileges and canInviteUsers right in the chat for own
   * links and owner privileges for other links.  
   * @param query A query to search for in the first names, last names and usernames of the users to
   * return.  
   * @param offsetRequest A chat join request from which to return next requests; pass null to get
   * results from the beginning.  
   * @param limit The maximum number of requests to join the chat to return.
   *
   * @return [TdApi.ChatJoinRequests] Contains a list of requests to join a chat.
   */
  suspend fun Chat.getJoinRequests(
    inviteLink: String?,
    query: String?,
    offsetRequest: ChatJoinRequest?,
    limit: Int
  ) = api.getChatJoinRequests(this.id, inviteLink, query, offsetRequest, limit)

  /**
   * Suspend function, which returns chat lists to which the chat can be added. This is an offline
   * request.
   *
   *
   * @return [TdApi.ChatLists] Contains a list of chat lists.
   */
  suspend fun Chat.getListsToAdd() = api.getChatListsToAddChat(this.id)

  /**
   * Suspend function, which returns information about a single member of a chat.
   *
   * @param memberId Member identifier.
   *
   * @return [TdApi.ChatMember] Describes a user or a chat as a member of another chat.
   */
  suspend fun Chat.getMember(memberId: MessageSender?) = api.getChatMember(this.id, memberId)

  /**
   * Suspend function, which returns the last message sent in a chat no later than the specified
   * date.
   *
   * @param date Point in time (Unix timestamp) relative to which to search for messages.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.getMessageByDate(date: Int) = api.getChatMessageByDate(this.id, date)

  /**
   * Suspend function, which returns information about the next messages of the specified type in
   * the chat split by days. Returns the results in reverse chronological order. Can return partial
   * result for the last returned day. Behavior of this method depends on the value of the option
   * &quot;utc_time_offset&quot;.
   *
   * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
   * searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
   * searchMessagesFilterUnreadReaction are unsupported in this function.  
   * @param fromMessageId The message identifier from which to return information about messages;
   * use 0 to get results from the last message.
   *
   * @return [TdApi.MessageCalendar] Contains information about found messages, split by days
   * according to the option &quot;utc_time_offset&quot;.
   */
  suspend fun Chat.getMessageCalendar(filter: SearchMessagesFilter?, fromMessageId: Long) =
      api.getChatMessageCalendar(this.id, filter, fromMessageId)

  /**
   * Suspend function, which returns approximate number of messages of the specified type in the
   * chat.
   *
   * @param filter Filter for message content; searchMessagesFilterEmpty is unsupported in this
   * function.  
   * @param returnLocal Pass true to get the number of messages without sending network requests,
   * or -1 if the number of messages is unknown locally.
   *
   * @return [TdApi.Count] Contains a counter.
   */
  suspend fun Chat.getMessageCount(filter: SearchMessagesFilter?, returnLocal: Boolean) =
      api.getChatMessageCount(this.id, filter, returnLocal)

  /**
   * Suspend function, which returns approximate 1-based position of a message among messages, which
   * can be found by the specified filter in the chat. Cannot be used in secret chats.
   *
   * @param messageId Message identifier.  
   * @param filter Filter for message content; searchMessagesFilterEmpty,
   * searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, and
   * searchMessagesFilterFailedToSend are unsupported in this function.  
   * @param messageThreadId If not 0, only messages in the specified thread will be considered;
   * supergroups only.
   *
   * @return [TdApi.Count] Contains a counter.
   */
  suspend fun Chat.getMessagePosition(
    messageId: Long,
    filter: SearchMessagesFilter?,
    messageThreadId: Long
  ) = api.getChatMessagePosition(this.id, messageId, filter, messageThreadId)

  /**
   * Suspend function, which returns information about a newest pinned message in the chat.
   *
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.getPinnedMessage() = api.getChatPinnedMessage(this.id)

  /**
   * Suspend function, which returns all scheduled messages in a chat. The messages are returned in
   * a reverse chronological order (i.e., in order of decreasing messageId).
   *
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun Chat.getScheduledMessages() = api.getChatScheduledMessages(this.id)

  /**
   * Suspend function, which returns sparse positions of messages of the specified type in the chat
   * to be used for shared media scroll implementation. Returns the results in reverse chronological
   * order (i.e., in order of decreasing messageId). Cannot be used in secret chats or with
   * searchMessagesFilterFailedToSend filter without an enabled message database.
   *
   * @param filter Filter for message content. Filters searchMessagesFilterEmpty,
   * searchMessagesFilterMention, searchMessagesFilterUnreadMention, and
   * searchMessagesFilterUnreadReaction are unsupported in this function.  
   * @param fromMessageId The message identifier from which to return information about message
   * positions.  
   * @param limit The expected number of message positions to be returned; 50-2000. A smaller number
   * of positions can be returned, if there are not enough appropriate messages.
   *
   * @return [TdApi.MessagePositions] Contains a list of message positions.
   */
  suspend fun Chat.getSparseMessagePositions(
    filter: SearchMessagesFilter?,
    fromMessageId: Long,
    limit: Int
  ) = api.getChatSparseMessagePositions(this.id, filter, fromMessageId, limit)

  /**
   * Suspend function, which returns sponsored messages to be shown in a chat; for channel chats
   * only.
   *
   *
   * @return [TdApi.SponsoredMessages] Contains a list of sponsored messages.
   */
  suspend fun Chat.getSponsoredMessages() = api.getChatSponsoredMessages(this.id)

  /**
   * Suspend function, which returns detailed statistics about a chat. Currently, this method can be
   * used only for supergroups and channels. Can be used only if supergroupFullInfo.canGetStatistics ==
   * true.
   *
   * @param isDark Pass true if a dark theme is used by the application.
   *
   * @return [TdApi.ChatStatistics] This class is an abstract base class.
   */
  suspend fun Chat.getStatistics(isDark: Boolean) = api.getChatStatistics(this.id, isDark)

  /**
   * Suspend function, which returns information about a forum topic.
   *
   * @param messageThreadId Message thread identifier of the forum topic.
   *
   * @return [TdApi.ForumTopic] Describes a forum topic.
   */
  suspend fun Chat.getForumTopic(messageThreadId: Long) = api.getForumTopic(this.id,
      messageThreadId)

  /**
   * Suspend function, which returns an HTTPS link to a topic in a forum chat. This is an offline
   * request.
   *
   * @param messageThreadId Message thread identifier of the forum topic.
   *
   * @return [TdApi.MessageLink] Contains an HTTPS link to a message in a supergroup or channel, or
   * a forum topic.
   */
  suspend fun Chat.getForumTopicLink(messageThreadId: Long) = api.getForumTopicLink(this.id,
      messageThreadId)

  /**
   * Suspend function, which returns found forum topics in a forum chat. This is a temporary method
   * for getting information about topic list from the server.
   *
   * @param query Query to search for in the forum topic&#039;s name.  
   * @param offsetDate The date starting from which the results need to be fetched. Use 0 or any
   * date in the future to get results from the last topic.  
   * @param offsetMessageId The message identifier of the last message in the last found topic, or 0
   * for the first request.  
   * @param offsetMessageThreadId The message thread identifier of the last found topic, or 0 for
   * the first request.  
   * @param limit The maximum number of forum topics to be returned; up to 100. For optimal
   * performance, the number of returned forum topics is chosen by TDLib and can be smaller than the
   * specified limit.
   *
   * @return [TdApi.ForumTopics] Describes a list of forum topics.
   */
  suspend fun Chat.getForumTopics(
    query: String?,
    offsetDate: Int,
    offsetMessageId: Long,
    offsetMessageThreadId: Long,
    limit: Int
  ) = api.getForumTopics(this.id, query, offsetDate, offsetMessageId, offsetMessageThreadId, limit)

  /**
   * Suspend function, which returns the high scores for a game and some part of the high score
   * table in the range of the specified user; for bots only.
   *
   * @param messageId Identifier of the message.  
   * @param userId User identifier.
   *
   * @return [TdApi.GameHighScores] Contains a list of game high scores.
   */
  suspend fun Chat.getGameHighScores(messageId: Long, userId: Long) = api.getGameHighScores(this.id,
      messageId, userId)

  /**
   * Suspend function, which sends an inline query to a bot and returns its results. Returns an
   * error with code 502 if the bot fails to answer the query before the query timeout expires.
   *
   * @param botUserId Identifier of the target bot.  
   * @param userLocation Location of the user; pass null if unknown or the bot doesn&#039;t need
   * user&#039;s location.  
   * @param query Text of the query.  
   * @param offset Offset of the first entry to return.
   *
   * @return [TdApi.InlineQueryResults] Represents the results of the inline query. Use
   * sendInlineQueryResultMessage to send the result of the query.
   */
  suspend fun Chat.getInlineQueryResults(
    botUserId: Long,
    userLocation: Location?,
    query: String?,
    offset: String?
  ) = api.getInlineQueryResults(botUserId, this.id, userLocation, query, offset)

  /**
   * Suspend function, which returns an HTTP URL which can be used to automatically authorize the
   * user on a website after clicking an inline button of type inlineKeyboardButtonTypeLoginUrl. Use
   * the method getLoginUrlInfo to find whether a prior user confirmation is needed. If an error is
   * returned, then the button must be handled as an ordinary URL button.
   *
   * @param messageId Message identifier of the message with the button.  
   * @param buttonId Button identifier.  
   * @param allowWriteAccess Pass true to allow the bot to send messages to the current user.
   *
   * @return [TdApi.HttpUrl] Contains an HTTP URL.
   */
  suspend fun Chat.getLoginUrl(
    messageId: Long,
    buttonId: Long,
    allowWriteAccess: Boolean
  ) = api.getLoginUrl(this.id, messageId, buttonId, allowWriteAccess)

  /**
   * Suspend function, which returns information about a button of type
   * inlineKeyboardButtonTypeLoginUrl. The method needs to be called when the user presses the button.
   *
   * @param messageId Message identifier of the message with the button.  
   * @param buttonId Button identifier.
   *
   * @return [TdApi.LoginUrlInfo] This class is an abstract base class.
   */
  suspend fun Chat.getLoginUrlInfo(messageId: Long, buttonId: Long) = api.getLoginUrlInfo(this.id,
      messageId, buttonId)

  /**
   * Suspend function, which returns information about a file with a map thumbnail in PNG format.
   * Only map thumbnail files with size less than 1MB can be downloaded.
   *
   * @param location Location of the map center.  
   * @param zoom Map zoom level; 13-20.  
   * @param width Map width in pixels before applying scale; 16-1024.  
   * @param height Map height in pixels before applying scale; 16-1024.  
   * @param scale Map scale; 1-3.  
   *
   * @return [TdApi.File] Represents a file.
   */
  suspend fun Chat.getMapThumbnailFile(
    location: Location?,
    zoom: Int,
    width: Int,
    height: Int,
    scale: Int
  ) = api.getMapThumbnailFile(location, zoom, width, height, scale, this.id)

  /**
   * Suspend function, which returns information about a message.
   *
   * @param messageId Identifier of the message to get.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.getMessage(messageId: Long) = api.getMessage(this.id, messageId)

  /**
   * Suspend function, which returns reactions added for a message, along with their sender.
   *
   * @param messageId Identifier of the message.  
   * @param reactionType Type of the reactions to return; pass null to return all added reactions.  
   * @param offset Offset of the first entry to return as received from the previous request; use
   * empty string to get the first chunk of results.  
   * @param limit The maximum number of reactions to be returned; must be positive and can&#039;t be
   * greater than 100.
   *
   * @return [TdApi.AddedReactions] Represents a list of reactions added to a message.
   */
  suspend fun Chat.getMessageAddedReactions(
    messageId: Long,
    reactionType: ReactionType?,
    offset: String?,
    limit: Int
  ) = api.getMessageAddedReactions(this.id, messageId, reactionType, offset, limit)

  /**
   * Suspend function, which returns reactions, which can be added to a message. The list can change
   * after updateActiveEmojiReactions, updateChatAvailableReactions for the chat, or
   * updateMessageInteractionInfo for the message.
   *
   * @param messageId Identifier of the message.  
   * @param rowSize Number of reaction per row, 5-25.
   *
   * @return [TdApi.AvailableReactions] Represents a list of reactions that can be added to a
   * message.
   */
  suspend fun Chat.getMessageAvailableReactions(messageId: Long, rowSize: Int) =
      api.getMessageAvailableReactions(this.id, messageId, rowSize)

  /**
   * Suspend function, which returns an HTML code for embedding the message. Available only for
   * messages in supergroups and channels with a username.
   *
   * @param messageId Identifier of the message.  
   * @param forAlbum Pass true to return an HTML code for embedding of the whole media album.
   *
   * @return [TdApi.Text] Contains some text.
   */
  suspend fun Chat.getMessageEmbeddingCode(messageId: Long, forAlbum: Boolean) =
      api.getMessageEmbeddingCode(this.id, messageId, forAlbum)

  /**
   * Suspend function, which returns a confirmation text to be shown to the user before starting
   * message import.
   *
   *
   * @return [TdApi.Text] Contains some text.
   */
  suspend fun Chat.getMessageImportConfirmationText() =
      api.getMessageImportConfirmationText(this.id)

  /**
   * Suspend function, which returns an HTTPS link to a message in a chat. Available only for
   * already sent messages in supergroups and channels, or if message.canGetMediaTimestampLinks and a
   * media timestamp link is generated. This is an offline request.
   *
   * @param messageId Identifier of the message.  
   * @param mediaTimestamp If not 0, timestamp from which the video/audio/video note/voice note
   * playing must start, in seconds. The media can be in the message content or in its web page
   * preview.  
   * @param forAlbum Pass true to create a link for the whole media album.  
   * @param inMessageThread Pass true to create a link to the message as a channel post comment, in
   * a message thread, or a forum topic.
   *
   * @return [TdApi.MessageLink] Contains an HTTPS link to a message in a supergroup or channel, or
   * a forum topic.
   */
  suspend fun Chat.getMessageLink(
    messageId: Long,
    mediaTimestamp: Int,
    forAlbum: Boolean,
    inMessageThread: Boolean
  ) = api.getMessageLink(this.id, messageId, mediaTimestamp, forAlbum, inMessageThread)

  /**
   * Suspend function, which returns information about a message, if it is available without sending
   * network request. This is an offline request.
   *
   * @param messageId Identifier of the message to get.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.getMessageLocally(messageId: Long) = api.getMessageLocally(this.id, messageId)

  /**
   * Suspend function, which returns forwarded copies of a channel message to different public
   * channels. For optimal performance, the number of returned messages is chosen by TDLib.
   *
   * @param messageId Message identifier.  
   * @param offset Offset of the first entry to return as received from the previous request; use
   * empty string to get the first chunk of results.  
   * @param limit The maximum number of messages to be returned; must be positive and can&#039;t be
   * greater than 100. For optimal performance, the number of returned messages is chosen by TDLib and
   * can be smaller than the specified limit.
   *
   * @return [TdApi.FoundMessages] Contains a list of messages found by a search.
   */
  suspend fun Chat.getMessagePublicForwards(
    messageId: Long,
    offset: String?,
    limit: Int
  ) = api.getMessagePublicForwards(this.id, messageId, offset, limit)

  /**
   * Suspend function, which returns detailed statistics about a message. Can be used only if
   * message.canGetStatistics == true.
   *
   * @param messageId Message identifier.  
   * @param isDark Pass true if a dark theme is used by the application.
   *
   * @return [TdApi.MessageStatistics] A detailed statistics about a message.
   */
  suspend fun Chat.getMessageStatistics(messageId: Long, isDark: Boolean) =
      api.getMessageStatistics(this.id, messageId, isDark)

  /**
   * Suspend function, which returns information about a message thread. Can be used only if
   * message.canGetMessageThread == true.
   *
   * @param messageId Identifier of the message.
   *
   * @return [TdApi.MessageThreadInfo] Contains information about a message thread.
   */
  suspend fun Chat.getMessageThread(messageId: Long) = api.getMessageThread(this.id, messageId)

  /**
   * Suspend function, which returns messages in a message thread of a message. Can be used only if
   * message.canGetMessageThread == true. Message thread of a channel message is in the channel&#039;s
   * linked supergroup. The messages are returned in a reverse chronological order (i.e., in order of
   * decreasing messageId). For optimal performance, the number of returned messages is chosen by
   * TDLib.
   *
   * @param messageId Message identifier, which thread history needs to be returned.  
   * @param fromMessageId Identifier of the message starting from which history must be fetched; use
   * 0 to get results from the last message.  
   * @param offset Specify 0 to get results from exactly the fromMessageId or a negative offset up
   * to 99 to get additionally some newer messages.  
   * @param limit The maximum number of messages to be returned; must be positive and can&#039;t be
   * greater than 100. If the offset is negative, the limit must be greater than or equal to -offset.
   * For optimal performance, the number of returned messages is chosen by TDLib and can be smaller
   * than the specified limit.
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun Chat.getMessageThreadHistory(
    messageId: Long,
    fromMessageId: Long,
    offset: Int,
    limit: Int
  ) = api.getMessageThreadHistory(this.id, messageId, fromMessageId, offset, limit)

  /**
   * Suspend function, which returns viewers of a recent outgoing message in a basic group or a
   * supergroup chat. For video notes and voice notes only users, opened content of the message, are
   * returned. The method can be called if message.canGetViewers == true.
   *
   * @param messageId Identifier of the message.
   *
   * @return [TdApi.MessageViewers] Represents a list of message viewers.
   */
  suspend fun Chat.getMessageViewers(messageId: Long) = api.getMessageViewers(this.id, messageId)

  /**
   * Suspend function, which returns information about messages. If a message is not found, returns
   * null on the corresponding position of the result.
   *
   * @param messageIds Identifiers of the messages to get.
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun Chat.getMessages(messageIds: LongArray?) = api.getMessages(this.id, messageIds)

  /**
   * Suspend function, which returns information about a successful payment.
   *
   * @param messageId Message identifier.
   *
   * @return [TdApi.PaymentReceipt] Contains information about a successful payment.
   */
  suspend fun Chat.getPaymentReceipt(messageId: Long) = api.getPaymentReceipt(this.id, messageId)

  /**
   * Suspend function, which returns users voted for the specified option in a non-anonymous polls.
   * For optimal performance, the number of returned users is chosen by TDLib.
   *
   * @param messageId Identifier of the message containing the poll.  
   * @param optionId 0-based identifier of the answer option.  
   * @param offset Number of users to skip in the result; must be non-negative.  
   * @param limit The maximum number of users to be returned; must be positive and can&#039;t be
   * greater than 50. For optimal performance, the number of returned users is chosen by TDLib and can
   * be smaller than the specified limit, even if the end of the voter list has not been reached.
   *
   * @return [TdApi.Users] Represents a list of users.
   */
  suspend fun Chat.getPollVoters(
    messageId: Long,
    optionId: Int,
    offset: Int,
    limit: Int
  ) = api.getPollVoters(this.id, messageId, optionId, offset, limit)

  /**
   * Suspend function, which returns information about a message that is replied by a given message.
   * Also, returns the pinned message, the game message, the invoice message, and the topic creation
   * message for messages of the types messagePinMessage, messageGameScore, messagePaymentSuccessful,
   * messageChatSetBackground and topic messages without replied message respectively.
   *
   * @param messageId Identifier of the reply message.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.getRepliedMessage(messageId: Long) = api.getRepliedMessage(this.id, messageId)

  /**
   * Suspend function, which loads an asynchronous or a zoomed in statistical graph.
   *
   * @param token The token for graph loading.  
   * @param x X-value for zoomed in graph or 0 otherwise.
   *
   * @return [TdApi.StatisticalGraph] This class is an abstract base class.
   */
  suspend fun Chat.getStatisticalGraph(token: String?, x: Long) = api.getStatisticalGraph(this.id,
      token, x)

  /**
   * Suspend function, which returns stickers from the installed sticker sets that correspond to any
   * of the given emoji or can be found by sticker-specific keywords. If the query is non-empty, then
   * favorite, recently used or trending stickers may also be returned.
   *
   * @param stickerType Type of the stickers to return.  
   * @param query Search query; a space-separated list of emoji or a keyword prefix. If empty,
   * returns all known installed stickers.  
   * @param limit The maximum number of stickers to be returned.  
   *
   * @return [TdApi.Stickers] Represents a list of stickers.
   */
  suspend fun Chat.getStickers(
    stickerType: StickerType?,
    query: String?,
    limit: Int
  ) = api.getStickers(stickerType, query, limit, this.id)

  /**
   * Suspend function, which returns list of participant identifiers, on whose behalf a video chat
   * in the chat can be joined.
   *
   *
   * @return [TdApi.MessageSenders] Represents a list of message senders.
   */
  suspend fun Chat.getVideoAvailableParticipants() = api.getVideoChatAvailableParticipants(this.id)

  /**
   * Suspend function, which returns RTMP URL for streaming to the chat; requires creator
   * privileges.
   *
   *
   * @return [TdApi.RtmpUrl] Represents an RTMP URL.
   */
  suspend fun Chat.getVideoRtmpUrl() = api.getVideoChatRtmpUrl(this.id)

  /**
   * Suspend function, which returns an HTTPS URL of a Web App to open after a link of the type
   * internalLinkTypeWebApp is clicked.
   *
   * @param botUserId Identifier of the target bot.  
   * @param webAppShortName Short name of the Web App.  
   * @param startParameter Start parameter from internalLinkTypeWebApp.  
   * @param theme Preferred Web App theme; pass null to use the default theme.  
   * @param applicationName Short name of the application; 0-64 English letters, digits, and
   * underscores.  
   * @param allowWriteAccess Pass true if the current user allowed the bot to send them messages.
   *
   * @return [TdApi.HttpUrl] Contains an HTTP URL.
   */
  suspend fun Chat.getWebAppLinkUrl(
    botUserId: Long,
    webAppShortName: String?,
    startParameter: String?,
    theme: ThemeParameters?,
    applicationName: String?,
    allowWriteAccess: Boolean
  ) = api.getWebAppLinkUrl(this.id, botUserId, webAppShortName, startParameter, theme,
      applicationName, allowWriteAccess)

  /**
   * Suspend function, which imports messages exported from another app.
   *
   * @param messageFile File with messages to import. Only inputFileLocal and inputFileGenerated are
   * supported. The file must not be previously uploaded.  
   * @param attachedFiles Files used in the imported messages. Only inputFileLocal and
   * inputFileGenerated are supported. The files must not be previously uploaded.
   */
  suspend fun Chat.importMessages(messageFile: InputFile?, attachedFiles: Array<InputFile>?) =
      api.importMessages(this.id, messageFile, attachedFiles)

  /**
   * Suspend function, which adds the current user as a new member to a chat. Private and secret
   * chats can&#039;t be joined using this method. May return an error with a message
   * &quot;INVITE_REQUEST_SENT&quot; if only a join request was created.
   */
  suspend fun Chat.join() = api.joinChat(this.id)

  /**
   * Suspend function, which removes the current user from chat members. Private and secret chats
   * can&#039;t be left using this method.
   */
  suspend fun Chat.leave() = api.leaveChat(this.id)

  /**
   * Suspend function, which informs TDLib that the chat is opened by the user. Many useful
   * activities depend on the chat being opened or closed (e.g., in supergroups and channels all
   * updates are received only for opened chats).
   */
  suspend fun Chat.open() = api.openChat(this.id)

  /**
   * Suspend function, which informs TDLib that the message content has been opened (e.g., the user
   * has opened a photo, video, document, location or venue, or has listened to an audio file or voice
   * note message). An updateMessageContentOpened update will be generated if something has changed.
   *
   * @param messageId Identifier of the message with the opened content.
   */
  suspend fun Chat.openMessageContent(messageId: Long) = api.openMessageContent(this.id, messageId)

  /**
   * Suspend function, which informs TDLib that a Web App is being opened from attachment menu, a
   * botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an
   * inlineKeyboardButtonTypeWebApp button. For each bot, a confirmation alert about data sent to the
   * bot must be shown once.
   *
   * @param botUserId Identifier of the bot, providing the Web App.  
   * @param url The URL from an inlineKeyboardButtonTypeWebApp button, a botMenuButton button, or an
   * internalLinkTypeAttachmentMenuBot link, or an empty string otherwise.  
   * @param theme Preferred Web App theme; pass null to use the default theme.  
   * @param applicationName Short name of the application; 0-64 English letters, digits, and
   * underscores.  
   * @param messageThreadId If not 0, a message thread identifier in which the message will be sent.
   *  
   * @param replyToMessageId Identifier of the replied message for the message sent by the Web App;
   * 0 if none.
   *
   * @return [TdApi.WebAppInfo] Contains information about a Web App.
   */
  suspend fun Chat.openWebApp(
    botUserId: Long,
    url: String?,
    theme: ThemeParameters?,
    applicationName: String?,
    messageThreadId: Long,
    replyToMessageId: Long
  ) = api.openWebApp(this.id, botUserId, url, theme, applicationName, messageThreadId,
      replyToMessageId)

  /**
   * Suspend function, which pins a message in a chat; requires canPinMessages rights or
   * canEditMessages rights in the channel.
   *
   * @param messageId Identifier of the new pinned message.  
   * @param disableNotification Pass true to disable notification about the pinned message.
   * Notifications are always disabled in channels and private chats.  
   * @param onlyForSelf Pass true to pin the message only for self; private chats only.
   */
  suspend fun Chat.pinMessage(
    messageId: Long,
    disableNotification: Boolean,
    onlyForSelf: Boolean
  ) = api.pinChatMessage(this.id, messageId, disableNotification, onlyForSelf)

  /**
   * Suspend function, which handles a pending join request in a chat.
   *
   * @param userId Identifier of the user that sent the request.  
   * @param approve Pass true to approve the request; pass false to decline it.
   */
  suspend fun Chat.processJoinRequest(userId: Long, approve: Boolean) =
      api.processChatJoinRequest(this.id, userId, approve)

  /**
   * Suspend function, which handles all pending join requests for a given link in a chat.
   *
   * @param inviteLink Invite link for which to process join requests. If empty, all join requests
   * will be processed. Requires administrator privileges and canInviteUsers right in the chat for own
   * links and owner privileges for other links.  
   * @param approve Pass true to approve all requests; pass false to decline them.
   */
  suspend fun Chat.processJoinRequests(inviteLink: String?, approve: Boolean) =
      api.processChatJoinRequests(this.id, inviteLink, approve)

  /**
   * Suspend function, which rates recognized speech in a video note or a voice note message.
   *
   * @param messageId Identifier of the message.  
   * @param isGood Pass true if the speech recognition is good.
   */
  suspend fun Chat.rateSpeechRecognition(messageId: Long, isGood: Boolean) =
      api.rateSpeechRecognition(this.id, messageId, isGood)

  /**
   * Suspend function, which marks all mentions in a chat as read.
   */
  suspend fun Chat.readAllMentions() = api.readAllChatMentions(this.id)

  /**
   * Suspend function, which marks all reactions in a chat or a forum topic as read.
   */
  suspend fun Chat.readAllReactions() = api.readAllChatReactions(this.id)

  /**
   * Suspend function, which marks all mentions in a forum topic as read.
   *
   * @param messageThreadId Message thread identifier in which mentions are marked as read.
   */
  suspend fun Chat.readAllMessageThreadMentions(messageThreadId: Long) =
      api.readAllMessageThreadMentions(this.id, messageThreadId)

  /**
   * Suspend function, which marks all reactions in a forum topic as read.
   *
   * @param messageThreadId Message thread identifier in which reactions are marked as read.
   */
  suspend fun Chat.readAllMessageThreadReactions(messageThreadId: Long) =
      api.readAllMessageThreadReactions(this.id, messageThreadId)

  /**
   * Suspend function, which recognizes speech in a video note or a voice note message. The message
   * must be successfully sent and must not be scheduled. May return an error with a message
   * &quot;MSG_VOICE_TOO_LONG&quot; if media duration is too big to be recognized.
   *
   * @param messageId Identifier of the message.
   */
  suspend fun Chat.recognizeSpeech(messageId: Long) = api.recognizeSpeech(this.id, messageId)

  /**
   * Suspend function, which removes a chat action bar without any other action.
   */
  suspend fun Chat.removeActionBar() = api.removeChatActionBar(this.id)

  /**
   * Suspend function, which removes a reaction from a message. A chosen reaction can always be
   * removed.
   *
   * @param messageId Identifier of the message.  
   * @param reactionType Type of the reaction to remove.
   */
  suspend fun Chat.removeMessageReaction(messageId: Long, reactionType: ReactionType?) =
      api.removeMessageReaction(this.id, messageId, reactionType)

  /**
   * Suspend function, which removes a chat from the list of recently found chats.
   */
  suspend fun Chat.removeRecentlyFound() = api.removeRecentlyFoundChat(this.id)

  /**
   * Suspend function, which removes a chat from the list of frequently used chats. Supported only
   * if the chat info database is enabled.
   *
   * @param category Category of frequently used chats.  
   */
  suspend fun Chat.removeTop(category: TopChatCategory?) = api.removeTopChat(category, this.id)

  /**
   * Suspend function, which replaces current primary invite link for a chat with a new primary
   * invite link. Available for basic groups, supergroups, and channels. Requires administrator
   * privileges and canInviteUsers right.
   *
   *
   * @return [TdApi.ChatInviteLink] Contains a chat invite link.
   */
  suspend fun Chat.replacePrimaryInviteLink() = api.replacePrimaryChatInviteLink(this.id)

  /**
   * Suspend function, which replaces the current RTMP URL for streaming to the chat; requires
   * creator privileges.
   *
   *
   * @return [TdApi.RtmpUrl] Represents an RTMP URL.
   */
  suspend fun Chat.replaceVideoRtmpUrl() = api.replaceVideoChatRtmpUrl(this.id)

  /**
   * Suspend function, which reports a chat to the Telegram moderators. A chat can be reported only
   * from the chat action bar, or if chat.canBeReported.
   *
   * @param messageIds Identifiers of reported messages; may be empty to report the whole chat.  
   * @param reason The reason for reporting the chat.  
   * @param text Additional report details; 0-1024 characters.
   */
  suspend fun Chat.report(
    messageIds: LongArray?,
    reason: ChatReportReason?,
    text: String?
  ) = api.reportChat(this.id, messageIds, reason, text)

  /**
   * Suspend function, which reports a chat photo to the Telegram moderators. A chat photo can be
   * reported only if chat.canBeReported.
   *
   * @param fileId Identifier of the photo to report. Only full photos from chatPhoto can be
   * reported.  
   * @param reason The reason for reporting the chat photo.  
   * @param text Additional report details; 0-1024 characters.
   */
  suspend fun Chat.reportPhoto(
    fileId: Int,
    reason: ChatReportReason?,
    text: String?
  ) = api.reportChatPhoto(this.id, fileId, reason, text)

  /**
   * Suspend function, which reports reactions set on a message to the Telegram moderators.
   * Reactions on a message can be reported only if message.canReportReactions.
   *
   * @param messageId Message identifier.  
   * @param senderId Identifier of the sender, which added the reaction.
   */
  suspend fun Chat.reportMessageReactions(messageId: Long, senderId: MessageSender?) =
      api.reportMessageReactions(this.id, messageId, senderId)

  /**
   * Suspend function, which resends messages which failed to send. Can be called only for messages
   * for which messageSendingStateFailed.canRetry is true and after specified in
   * messageSendingStateFailed.retryAfter time passed. If a message is re-sent, the corresponding
   * failed to send message is deleted. Returns the sent messages in the same order as the message
   * identifiers passed in messageIds. If a message can&#039;t be re-sent, null will be returned
   * instead of the message.
   *
   * @param messageIds Identifiers of the messages to resend. Message identifiers must be in a
   * strictly increasing order.
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun Chat.resendMessages(messageIds: LongArray?) = api.resendMessages(this.id, messageIds)

  /**
   * Suspend function, which revokes invite link for a chat. Available for basic groups,
   * supergroups, and channels. Requires administrator privileges and canInviteUsers right in the chat
   * for own links and owner privileges for other links. If a primary link is revoked, then
   * additionally to the revoked link returns new primary link.
   *
   * @param inviteLink Invite link to be revoked.
   *
   * @return [TdApi.ChatInviteLinks] Contains a list of chat invite links.
   */
  suspend fun Chat.revokeInviteLink(inviteLink: String?) = api.revokeChatInviteLink(this.id,
      inviteLink)

  /**
   * Suspend function, which saves application log event on the server. Can be called before
   * authorization.
   *
   * @param type Event type.  
   * @param data The log event data.
   */
  suspend fun Chat.saveApplicationLogEvent(type: String?, data: JsonValue?) =
      api.saveApplicationLogEvent(type, this.id, data)

  /**
   * Suspend function, which searches for a specified query in the first name, last name and
   * usernames of the members of a specified chat. Requires administrator rights in channels.
   *
   * @param query Query to search for.  
   * @param limit The maximum number of users to be returned; up to 200.  
   * @param filter The type of users to search for; pass null to search among all chat members.
   *
   * @return [TdApi.ChatMembers] Contains a list of chat members.
   */
  suspend fun Chat.searchMembers(
    query: String?,
    limit: Int,
    filter: ChatMembersFilter?
  ) = api.searchChatMembers(this.id, query, limit, filter)

  /**
   * Suspend function, which searches for messages with given words in the chat. Returns the results
   * in reverse chronological order, i.e. in order of decreasing messageId. Cannot be used in secret
   * chats with a non-empty query (searchSecretMessages must be used instead), or without an enabled
   * message database. For optimal performance, the number of returned messages is chosen by TDLib and
   * can be smaller than the specified limit. A combination of query, senderId, filter and
   * messageThreadId search criteria is expected to be supported, only if it is required for Telegram
   * official application implementation.
   *
   * @param query Query to search for.  
   * @param senderId Identifier of the sender of messages to search for; pass null to search for
   * messages from any sender. Not supported in secret chats.  
   * @param fromMessageId Identifier of the message starting from which history must be fetched; use
   * 0 to get results from the last message.  
   * @param offset Specify 0 to get results from exactly the fromMessageId or a negative offset to
   * get the specified message and some newer messages.  
   * @param limit The maximum number of messages to be returned; must be positive and can&#039;t be
   * greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal
   * performance, the number of returned messages is chosen by TDLib and can be smaller than the
   * specified limit.  
   * @param filter Additional filter for messages to search; pass null to search for all messages.  
   * @param messageThreadId If not 0, only messages in the specified thread will be returned;
   * supergroups only.
   *
   * @return [TdApi.FoundChatMessages] Contains a list of messages found by a search in a given
   * chat.
   */
  suspend fun Chat.searchMessages(
    query: String?,
    senderId: MessageSender?,
    fromMessageId: Long,
    offset: Int,
    limit: Int,
    filter: SearchMessagesFilter?,
    messageThreadId: Long
  ) = api.searchChatMessages(this.id, query, senderId, fromMessageId, offset, limit, filter,
      messageThreadId)

  /**
   * Suspend function, which returns information about the recent locations of chat members that
   * were sent to the chat. Returns up to 1 location message per user.
   *
   * @param limit The maximum number of messages to be returned.
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun Chat.searchRecentLocationMessages(limit: Int) =
      api.searchChatRecentLocationMessages(this.id, limit)

  /**
   * Suspend function, which searches for messages in secret chats. Returns the results in reverse
   * chronological order. For optimal performance, the number of returned messages is chosen by TDLib.
   *
   * @param query Query to search for. If empty, searchChatMessages must be used instead.  
   * @param offset Offset of the first entry to return as received from the previous request; use
   * empty string to get the first chunk of results.  
   * @param limit The maximum number of messages to be returned; up to 100. For optimal performance,
   * the number of returned messages is chosen by TDLib and can be smaller than the specified limit.  
   * @param filter Additional filter for messages to search; pass null to search for all messages.
   *
   * @return [TdApi.FoundMessages] Contains a list of messages found by a search.
   */
  suspend fun Chat.searchSecretMessages(
    query: String?,
    offset: String?,
    limit: Int,
    filter: SearchMessagesFilter?
  ) = api.searchSecretMessages(this.id, query, offset, limit, filter)

  /**
   * Suspend function, which invites a bot to a chat (if it is not yet a member) and sends it the
   * /start command. Bots can&#039;t be invited to a private chat other than the chat with the bot.
   * Bots can&#039;t be invited to channels (although they can be added as admins) and secret chats.
   * Returns the sent message.
   *
   * @param botUserId Identifier of the bot.  
   * @param parameter A hidden parameter sent to the bot for deep linking purposes
   * (https://core.telegram.org/bots#deep-linking).
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.sendBotStartMessage(botUserId: Long, parameter: String?) =
      api.sendBotStartMessage(botUserId, this.id, parameter)

  /**
   * Suspend function, which sends a notification about user activity in a chat.
   *
   * @param messageThreadId If not 0, a message thread identifier in which the action was performed.
   *  
   * @param action The action description; pass null to cancel the currently active action.
   */
  suspend fun Chat.sendAction(messageThreadId: Long, action: ChatAction?) =
      api.sendChatAction(this.id, messageThreadId, action)

  /**
   * Suspend function, which sends a notification about a screenshot taken in a chat. Supported only
   * in private and secret chats.
   */
  suspend fun Chat.sendScreenshotTakenNotification() =
      api.sendChatScreenshotTakenNotification(this.id)

  /**
   * Suspend function, which sends the result of an inline query as a message. Returns the sent
   * message. Always clears a chat draft message.
   *
   * @param messageThreadId If not 0, a message thread identifier in which the message will be sent.
   *  
   * @param replyToMessageId Identifier of a replied message; 0 if none.  
   * @param options Options to be used to send the message; pass null to use default options.  
   * @param queryId Identifier of the inline query.  
   * @param resultId Identifier of the inline result.  
   * @param hideViaBot Pass true to hide the bot, via which the message is sent. Can be used only
   * for bots getOption(&quot;animation_search_bot_username&quot;),
   * getOption(&quot;photo_search_bot_username&quot;), and
   * getOption(&quot;venue_search_bot_username&quot;).
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.sendInlineQueryResultMessage(
    messageThreadId: Long,
    replyToMessageId: Long,
    options: MessageSendOptions?,
    queryId: Long,
    resultId: String?,
    hideViaBot: Boolean
  ) = api.sendInlineQueryResultMessage(this.id, messageThreadId, replyToMessageId, options, queryId,
      resultId, hideViaBot)

  /**
   * Suspend function, which sends a message. Returns the sent message.
   *
   * @param messageThreadId If not 0, a message thread identifier in which the message will be sent.
   *  
   * @param replyToMessageId Identifier of the replied message; 0 if none.  
   * @param options Options to be used to send the message; pass null to use default options.  
   * @param replyMarkup Markup for replying to the message; pass null if none; for bots only.  
   * @param inputMessageContent The content of the message to be sent.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.sendMessage(
    messageThreadId: Long,
    replyToMessageId: Long,
    options: MessageSendOptions?,
    replyMarkup: ReplyMarkup?,
    inputMessageContent: InputMessageContent?
  ) = api.sendMessage(this.id, messageThreadId, replyToMessageId, options, replyMarkup,
      inputMessageContent)

  /**
   * Suspend function, which sends 2-10 messages grouped together into an album. Currently, only
   * audio, document, photo and video messages can be grouped into an album. Documents and audio files
   * can be only grouped in an album with messages of the same type. Returns sent messages.
   *
   * @param messageThreadId If not 0, a message thread identifier in which the messages will be
   * sent.  
   * @param replyToMessageId Identifier of a replied message; 0 if none.  
   * @param options Options to be used to send the messages; pass null to use default options.  
   * @param inputMessageContents Contents of messages to be sent. At most 10 messages can be added
   * to an album.  
   * @param onlyPreview Pass true to get fake messages instead of actually sending them.
   *
   * @return [TdApi.Messages] Contains a list of messages.
   */
  suspend fun Chat.sendMessageAlbum(
    messageThreadId: Long,
    replyToMessageId: Long,
    options: MessageSendOptions?,
    inputMessageContents: Array<InputMessageContent>?,
    onlyPreview: Boolean
  ) = api.sendMessageAlbum(this.id, messageThreadId, replyToMessageId, options,
      inputMessageContents, onlyPreview)

  /**
   * Suspend function, which changes reactions, available in a chat. Available for basic groups,
   * supergroups, and channels. Requires canChangeInfo administrator right.
   *
   * @param availableReactions Reactions available in the chat. All emoji reactions must be active.
   */
  suspend fun Chat.setAvailableReactions(availableReactions: ChatAvailableReactions?) =
      api.setChatAvailableReactions(this.id, availableReactions)

  /**
   * Suspend function, which changes the background in a specific chat. Supported only in private
   * and secret chats with non-deleted users.
   *
   * @param background The input background to use; pass null to create a new filled background or
   * to remove the current background.  
   * @param type Background type; pass null to remove the current background.  
   * @param darkThemeDimming Dimming of the background in dark themes, as a percentage; 0-100.
   */
  suspend fun Chat.setBackground(
    background: InputBackground?,
    type: BackgroundType?,
    darkThemeDimming: Int
  ) = api.setChatBackground(this.id, background, type, darkThemeDimming)

  /**
   * Suspend function, which changes application-specific data associated with a chat.
   *
   * @param clientData New value of clientData.
   */
  suspend fun Chat.setClientData(clientData: String?) = api.setChatClientData(this.id, clientData)

  /**
   * Suspend function, which changes information about a chat. Available for basic groups,
   * supergroups, and channels. Requires canChangeInfo administrator right.
   *
   * @param description New chat description; 0-255 characters.
   */
  suspend fun Chat.setDescription(description: String?) = api.setChatDescription(this.id,
      description)

  /**
   * Suspend function, which changes the discussion group of a channel chat; requires canChangeInfo
   * administrator right in the channel if it is specified.
   *
   * @param discussionChatId Identifier of a new channel&#039;s discussion group. Use 0 to remove
   * the discussion group. Use the method getSuitableDiscussionChats to find all suitable groups. Basic
   * group chats must be first upgraded to supergroup chats. If new chat members don&#039;t have access
   * to old messages in the supergroup, then toggleSupergroupIsAllHistoryAvailable must be used first
   * to change that.
   */
  suspend fun Chat.setDiscussionGroup(discussionChatId: Long) = api.setChatDiscussionGroup(this.id,
      discussionChatId)

  /**
   * Suspend function, which changes the draft message in a chat.
   *
   * @param messageThreadId If not 0, a message thread identifier in which the draft was changed.  
   * @param draftMessage New draft message; pass null to remove the draft.
   */
  suspend fun Chat.setDraftMessage(messageThreadId: Long, draftMessage: DraftMessage?) =
      api.setChatDraftMessage(this.id, messageThreadId, draftMessage)

  /**
   * Suspend function, which changes the location of a chat. Available only for some location-based
   * supergroups, use supergroupFullInfo.canSetLocation to check whether the method is allowed to use.
   *
   * @param location New location for the chat; must be valid and not null.
   */
  suspend fun Chat.setLocation(location: ChatLocation?) = api.setChatLocation(this.id, location)

  /**
   * Suspend function, which changes the status of a chat member, needs appropriate privileges. This
   * function is currently not suitable for transferring chat ownership; use transferChatOwnership
   * instead. Use addChatMember or banChatMember if some additional parameters needs to be passed.
   *
   * @param memberId Member identifier. Chats can be only banned and unbanned in supergroups and
   * channels.  
   * @param status The new status of the member in the chat.
   */
  suspend fun Chat.setMemberStatus(memberId: MessageSender?, status: ChatMemberStatus?) =
      api.setChatMemberStatus(this.id, memberId, status)

  /**
   * Suspend function, which changes the message auto-delete or self-destruct (for secret chats)
   * time in a chat. Requires changeInfo administrator right in basic groups, supergroups and channels
   * Message auto-delete time can&#039;t be changed in a chat with the current user (Saved Messages)
   * and the chat 777000 (Telegram).
   *
   * @param messageAutoDeleteTime New time value, in seconds; unless the chat is secret, it must be
   * from 0 up to 365 * 86400 and be divisible by 86400. If 0, then messages aren&#039;t deleted
   * automatically.
   */
  suspend fun Chat.setMessageAutoDeleteTime(messageAutoDeleteTime: Int) =
      api.setChatMessageAutoDeleteTime(this.id, messageAutoDeleteTime)

  /**
   * Suspend function, which selects a message sender to send messages in a chat.
   *
   * @param messageSenderId New message sender for the chat.
   */
  suspend fun Chat.setMessageSender(messageSenderId: MessageSender?) =
      api.setChatMessageSender(this.id, messageSenderId)

  /**
   * Suspend function, which changes the notification settings of a chat. Notification settings of a
   * chat with the current user (Saved Messages) can&#039;t be changed.
   *
   * @param notificationSettings New notification settings for the chat. If the chat is muted for
   * more than 366 days, it is considered to be muted forever.
   */
  suspend fun Chat.setNotificationSettings(notificationSettings: ChatNotificationSettings?) =
      api.setChatNotificationSettings(this.id, notificationSettings)

  /**
   * Suspend function, which changes the chat members permissions. Supported only for basic groups
   * and supergroups. Requires canRestrictMembers administrator right.
   *
   * @param permissions New non-administrator members permissions in the chat.
   */
  suspend fun Chat.setPermissions(permissions: ChatPermissions?) = api.setChatPermissions(this.id,
      permissions)

  /**
   * Suspend function, which changes the photo of a chat. Supported only for basic groups,
   * supergroups and channels. Requires canChangeInfo administrator right.
   *
   * @param photo New chat photo; pass null to delete the chat photo.
   */
  suspend fun Chat.setPhoto(photo: InputChatPhoto?) = api.setChatPhoto(this.id, photo)

  /**
   * Suspend function, which changes the slow mode delay of a chat. Available only for supergroups;
   * requires canRestrictMembers rights.
   *
   * @param slowModeDelay New slow mode delay for the chat, in seconds; must be one of 0, 10, 30,
   * 60, 300, 900, 3600.
   */
  suspend fun Chat.setSlowModeDelay(slowModeDelay: Int) = api.setChatSlowModeDelay(this.id,
      slowModeDelay)

  /**
   * Suspend function, which changes the chat theme. Supported only in private and secret chats.
   *
   * @param themeName Name of the new chat theme; pass an empty string to return the default theme.
   */
  suspend fun Chat.setTheme(themeName: String?) = api.setChatTheme(this.id, themeName)

  /**
   * Suspend function, which changes the chat title. Supported only for basic groups, supergroups
   * and channels. Requires canChangeInfo administrator right.
   *
   * @param title New title of the chat; 1-128 characters.
   */
  suspend fun Chat.setTitle(title: String?) = api.setChatTitle(this.id, title)

  /**
   * Suspend function, which changes the notification settings of a forum topic.
   *
   * @param messageThreadId Message thread identifier of the forum topic.  
   * @param notificationSettings New notification settings for the forum topic. If the topic is
   * muted for more than 366 days, it is considered to be muted forever.
   */
  suspend fun Chat.setForumTopicNotificationSettings(messageThreadId: Long,
      notificationSettings: ChatNotificationSettings?) =
      api.setForumTopicNotificationSettings(this.id, messageThreadId, notificationSettings)

  /**
   * Suspend function, which updates the game score of the specified user in the game; for bots
   * only.
   *
   * @param messageId Identifier of the message.  
   * @param editMessage Pass true to edit the game message to include the current scoreboard.  
   * @param userId User identifier.  
   * @param score The new score.  
   * @param force Pass true to update the score even if it decreases. If the score is 0, the user
   * will be deleted from the high score table.
   *
   * @return [TdApi.Message] Describes a message.
   */
  suspend fun Chat.setGameScore(
    messageId: Long,
    editMessage: Boolean,
    userId: Long,
    score: Int,
    force: Boolean
  ) = api.setGameScore(this.id, messageId, editMessage, userId, score, force)

  /**
   * Suspend function, which changes the order of pinned forum topics.
   *
   * @param messageThreadIds The new list of pinned forum topics.
   */
  suspend fun Chat.setPinnedForumTopics(messageThreadIds: LongArray?) =
      api.setPinnedForumTopics(this.id, messageThreadIds)

  /**
   * Suspend function, which changes the user answer to a poll. A poll in quiz mode can be answered
   * only once.
   *
   * @param messageId Identifier of the message containing the poll.  
   * @param optionIds 0-based identifiers of answer options, chosen by the user. User can choose
   * more than 1 answer option only is the poll allows multiple answers.
   */
  suspend fun Chat.setPollAnswer(messageId: Long, optionIds: IntArray?) = api.setPollAnswer(this.id,
      messageId, optionIds)

  /**
   * Suspend function, which changes default participant identifier, on whose behalf a video chat in
   * the chat will be joined.
   *
   * @param defaultParticipantId Default group call participant identifier to join the video chats.
   */
  suspend fun Chat.setVideoDefaultParticipant(defaultParticipantId: MessageSender?) =
      api.setVideoChatDefaultParticipant(this.id, defaultParticipantId)

  /**
   * Suspend function, which shares a chat after pressing a keyboardButtonTypeRequestChat button
   * with the bot.
   *
   * @param messageId Identifier of the message with the button.  
   * @param buttonId Identifier of the button.  
   * @param sharedChatId Identifier of the shared chat.  
   * @param onlyCheck Pass true to check that the chat can be shared by the button instead of
   * actually sharing it. Doesn&#039;t check botIsMember and botAdministratorRights restrictions. If
   * the bot must be a member, then all chats from getGroupsInCommon and all chats, where the user can
   * add the bot, are suitable. In the latter case the bot will be automatically added to the chat. If
   * the bot must be an administrator, then all chats, where the bot already has requested rights or
   * can be added to administrators by the user, are suitable. In the latter case the bot will be
   * automatically granted requested rights.
   */
  suspend fun Chat.shareWithBot(
    messageId: Long,
    buttonId: Int,
    sharedChatId: Long,
    onlyCheck: Boolean
  ) = api.shareChatWithBot(this.id, messageId, buttonId, sharedChatId, onlyCheck)

  /**
   * Suspend function, which shares a user after pressing a keyboardButtonTypeRequestUser button
   * with the bot.
   *
   * @param messageId Identifier of the message with the button.  
   * @param buttonId Identifier of the button.  
   * @param sharedUserId Identifier of the shared user.  
   * @param onlyCheck Pass true to check that the user can be shared by the button instead of
   * actually sharing them.
   */
  suspend fun Chat.shareUserWithBot(
    messageId: Long,
    buttonId: Int,
    sharedUserId: Long,
    onlyCheck: Boolean
  ) = api.shareUserWithBot(this.id, messageId, buttonId, sharedUserId, onlyCheck)

  /**
   * Suspend function, which stops a poll. A poll in a message can be stopped when the message has
   * canBeEdited flag set.
   *
   * @param messageId Identifier of the message containing the poll.  
   * @param replyMarkup The new message reply markup; pass null if none; for bots only.
   */
  suspend fun Chat.stopPoll(messageId: Long, replyMarkup: ReplyMarkup?) = api.stopPoll(this.id,
      messageId, replyMarkup)

  /**
   * Suspend function, which changes the value of the default disableNotification parameter, used
   * when a message is sent to a chat.
   *
   * @param defaultDisableNotification New value of defaultDisableNotification.
   */
  suspend fun Chat.toggleDefaultDisableNotification(defaultDisableNotification: Boolean) =
      api.toggleChatDefaultDisableNotification(this.id, defaultDisableNotification)

  /**
   * Suspend function, which changes the ability of users to save, forward, or copy chat content.
   * Supported only for basic groups, supergroups and channels. Requires owner privileges.
   *
   * @param hasProtectedContent New value of hasProtectedContent.
   */
  suspend fun Chat.toggleHasProtectedContent(hasProtectedContent: Boolean) =
      api.toggleChatHasProtectedContent(this.id, hasProtectedContent)

  /**
   * Suspend function, which changes the marked as unread state of a chat.
   *
   * @param isMarkedAsUnread New value of isMarkedAsUnread.
   */
  suspend fun Chat.toggleIsMarkedAsUnread(isMarkedAsUnread: Boolean) =
      api.toggleChatIsMarkedAsUnread(this.id, isMarkedAsUnread)

  /**
   * Suspend function, which changes the pinned state of a chat. There can be up to
   * getOption(&quot;pinned_chat_count_max&quot;)/getOption(&quot;pinned_archived_chat_count_max&quot;)
   * pinned non-secret chats and the same number of secret chats in the main/archive chat list. The
   * limit can be increased with Telegram Premium.
   *
   * @param chatList Chat list in which to change the pinned state of the chat.  
   * @param isPinned Pass true to pin the chat; pass false to unpin it.
   */
  suspend fun Chat.toggleIsPinned(chatList: ChatList?, isPinned: Boolean) =
      api.toggleChatIsPinned(chatList, this.id, isPinned)

  /**
   * Suspend function, which changes the translatable state of a chat; for Telegram Premium users
   * only.
   *
   * @param isTranslatable New value of isTranslatable.
   */
  suspend fun Chat.toggleIsTranslatable(isTranslatable: Boolean) =
      api.toggleChatIsTranslatable(this.id, isTranslatable)

  /**
   * Suspend function, which toggles whether a topic is closed in a forum supergroup chat; requires
   * canManageTopics administrator right in the supergroup unless the user is creator of the topic.
   *
   * @param messageThreadId Message thread identifier of the forum topic.  
   * @param isClosed Pass true to close the topic; pass false to reopen it.
   */
  suspend fun Chat.toggleForumTopicIsClosed(messageThreadId: Long, isClosed: Boolean) =
      api.toggleForumTopicIsClosed(this.id, messageThreadId, isClosed)

  /**
   * Suspend function, which changes the pinned state of a forum topic; requires canManageTopics
   * administrator right in the supergroup. There can be up to
   * getOption(&quot;pinned_forum_topic_count_max&quot;) pinned forum topics.
   *
   * @param messageThreadId Message thread identifier of the forum topic.  
   * @param isPinned Pass true to pin the topic; pass false to unpin it.
   */
  suspend fun Chat.toggleForumTopicIsPinned(messageThreadId: Long, isPinned: Boolean) =
      api.toggleForumTopicIsPinned(this.id, messageThreadId, isPinned)

  /**
   * Suspend function, which toggles whether a General topic is hidden in a forum supergroup chat;
   * requires canManageTopics administrator right in the supergroup.
   *
   * @param isHidden Pass true to hide and close the General topic; pass false to unhide it.
   */
  suspend fun Chat.toggleGeneralForumTopicIsHidden(isHidden: Boolean) =
      api.toggleGeneralForumTopicIsHidden(this.id, isHidden)

  /**
   * Suspend function, which changes the owner of a chat. The current user must be a current owner
   * of the chat. Use the method canTransferOwnership to check whether the ownership can be transferred
   * from the current session. Available only for supergroups and channel chats.
   *
   * @param userId Identifier of the user to which transfer the ownership. The ownership can&#039;t
   * be transferred to a bot or to a deleted user.  
   * @param password The 2-step verification password of the current user.
   */
  suspend fun Chat.transferOwnership(userId: Long, password: String?) =
      api.transferChatOwnership(this.id, userId, password)

  /**
   * Suspend function, which extracts text or caption of the given message and translates it to the
   * given language. If the current user is a Telegram Premium user, then text formatting is preserved.
   *
   * @param messageId Identifier of the message.  
   * @param toLanguageCode Language code of the language to which the message is translated. Must be
   * one of &quot;af&quot;, &quot;sq&quot;, &quot;am&quot;, &quot;ar&quot;, &quot;hy&quot;,
   * &quot;az&quot;, &quot;eu&quot;, &quot;be&quot;, &quot;bn&quot;, &quot;bs&quot;, &quot;bg&quot;,
   * &quot;ca&quot;, &quot;ceb&quot;, &quot;zh-CN&quot;, &quot;zh&quot;, &quot;zh-Hans&quot;,
   * &quot;zh-TW&quot;, &quot;zh-Hant&quot;, &quot;co&quot;, &quot;hr&quot;, &quot;cs&quot;,
   * &quot;da&quot;, &quot;nl&quot;, &quot;en&quot;, &quot;eo&quot;, &quot;et&quot;, &quot;fi&quot;,
   * &quot;fr&quot;, &quot;fy&quot;, &quot;gl&quot;, &quot;ka&quot;, &quot;de&quot;, &quot;el&quot;,
   * &quot;gu&quot;, &quot;ht&quot;, &quot;ha&quot;, &quot;haw&quot;, &quot;he&quot;, &quot;iw&quot;,
   * &quot;hi&quot;, &quot;hmn&quot;, &quot;hu&quot;, &quot;is&quot;, &quot;ig&quot;, &quot;id&quot;,
   * &quot;in&quot;, &quot;ga&quot;, &quot;it&quot;, &quot;ja&quot;, &quot;jv&quot;, &quot;kn&quot;,
   * &quot;kk&quot;, &quot;km&quot;, &quot;rw&quot;, &quot;ko&quot;, &quot;ku&quot;, &quot;ky&quot;,
   * &quot;lo&quot;, &quot;la&quot;, &quot;lv&quot;, &quot;lt&quot;, &quot;lb&quot;, &quot;mk&quot;,
   * &quot;mg&quot;, &quot;ms&quot;, &quot;ml&quot;, &quot;mt&quot;, &quot;mi&quot;, &quot;mr&quot;,
   * &quot;mn&quot;, &quot;my&quot;, &quot;ne&quot;, &quot;no&quot;, &quot;ny&quot;, &quot;or&quot;,
   * &quot;ps&quot;, &quot;fa&quot;, &quot;pl&quot;, &quot;pt&quot;, &quot;pa&quot;, &quot;ro&quot;,
   * &quot;ru&quot;, &quot;sm&quot;, &quot;gd&quot;, &quot;sr&quot;, &quot;st&quot;, &quot;sn&quot;,
   * &quot;sd&quot;, &quot;si&quot;, &quot;sk&quot;, &quot;sl&quot;, &quot;so&quot;, &quot;es&quot;,
   * &quot;su&quot;, &quot;sw&quot;, &quot;sv&quot;, &quot;tl&quot;, &quot;tg&quot;, &quot;ta&quot;,
   * &quot;tt&quot;, &quot;te&quot;, &quot;th&quot;, &quot;tr&quot;, &quot;tk&quot;, &quot;uk&quot;,
   * &quot;ur&quot;, &quot;ug&quot;, &quot;uz&quot;, &quot;vi&quot;, &quot;cy&quot;, &quot;xh&quot;,
   * &quot;yi&quot;, &quot;ji&quot;, &quot;yo&quot;, &quot;zu&quot;.
   *
   * @return [TdApi.FormattedText] A text with some entities.
   */
  suspend fun Chat.translateMessageText(messageId: Long, toLanguageCode: String?) =
      api.translateMessageText(this.id, messageId, toLanguageCode)

  /**
   * Suspend function, which removes all pinned messages from a chat; requires canPinMessages rights
   * in the group or canEditMessages rights in the channel.
   */
  suspend fun Chat.unpinAllMessages() = api.unpinAllChatMessages(this.id)

  /**
   * Suspend function, which removes all pinned messages from a forum topic; requires canPinMessages
   * rights in the supergroup.
   *
   * @param messageThreadId Message thread identifier in which messages will be unpinned.
   */
  suspend fun Chat.unpinAllMessageThreadMessages(messageThreadId: Long) =
      api.unpinAllMessageThreadMessages(this.id, messageThreadId)

  /**
   * Suspend function, which removes a pinned message from a chat; requires canPinMessages rights in
   * the group or canEditMessages rights in the channel.
   *
   * @param messageId Identifier of the removed pinned message.
   */
  suspend fun Chat.unpinMessage(messageId: Long) = api.unpinChatMessage(this.id, messageId)

  /**
   * Suspend function, which creates a new supergroup from an existing basic group and sends a
   * corresponding messageChatUpgradeTo and messageChatUpgradeFrom; requires creator privileges.
   * Deactivates the original basic group.
   *
   *
   * @return [TdApi.Chat] A chat. (Can be a private chat, basic group, supergroup, or secret chat.)
   */
  suspend fun Chat.upgradeBasicGroupToSupergroup() =
      api.upgradeBasicGroupChatToSupergroupChat(this.id)

  /**
   * Suspend function, which informs TDLib that messages are being viewed by the user. Sponsored
   * messages must be marked as viewed only when the entire text of the message is shown on the screen
   * (excluding the button). Many useful activities depend on whether the messages are currently being
   * viewed or not (e.g., marking messages as read, incrementing a view counter, updating a view
   * counter, removing deleted messages in supergroups and channels).
   *
   * @param messageIds The identifiers of the messages being viewed.  
   * @param source Source of the message view; pass null to guess the source based on chat open
   * state.  
   * @param forceRead Pass true to mark as read the specified messages even the chat is closed.
   */
  suspend fun Chat.viewMessages(
    messageIds: LongArray?,
    source: MessageSource?,
    forceRead: Boolean
  ) = api.viewMessages(this.id, messageIds, source, forceRead)
}
